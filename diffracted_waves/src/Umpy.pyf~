!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module Umpy ! in 
    interface  ! in :Umpy
        function usum(r,omega,phi) ! in :Umpy:Umpy.f90
            use nrtype
            use global
            real :: r
            real :: omega
            real :: phi
            real :: usum
        end function usum
        function disp(r,omega,m) ! in :Umpy:Umpy.f90
            use nr, only: bessj,bessj0,bessj1,bessy0,bessy,bessy1
            use nrtype
            use nrutil, only: poly
            use global
            real(kind=sp) intent(in) :: r
            real(kind=sp) intent(in) :: omega
            integer(kind=i4b) intent(in) :: m
            complex(kind=spc) :: disp
        end function disp
        function hankel1(n,x) ! in :Umpy:Umpy.f90
            use nrtype
            use nr, only: bessj,bessj0,bessj1,bessy0,bessy,bessy1
            integer(kind=i4b) intent(in) :: n
            real(kind=sp) intent(in) :: x
            complex(kind=spc) :: hankel1
        end function hankel1
        function hankel2(n,x) ! in :Umpy:Umpy.f90
            use nrtype
            use nr, only: bessj,bessj0,bessj1,bessy0,bessy,bessy1
            integer(kind=i4b) intent(in) :: n
            real(kind=sp) intent(in) :: x
            complex(kind=spc) :: hankel2
        end function hankel2
        module nrtype ! in :Umpy:nrtype.f90
            integer, parameter,optional :: dpc=kind((1.0d0,1.0d0))
            real(kind=4), parameter,optional :: euler=0.5772156649015328606065120900824024310422_sp
            real(kind=4), parameter,optional :: twopi=6.283185307179586476925286766559005768394_sp
            integer, parameter,optional :: i1b=selected_int_kind(2)
            integer, parameter,optional :: lgt=kind(.true.)
            real(kind=4), parameter,optional :: pi=3.141592653589793238462643383279502884197_sp
            integer, parameter,optional :: i4b=selected_int_kind(9)
            integer, parameter,optional :: spc=kind((1.0,1.0))
            integer, parameter,optional :: dp=kind(1.0d0)
            real(kind=8), parameter,optional :: twopi_d=6.283185307179586476925286766559005768394_dp
            real(kind=8), parameter,optional :: pi_d=3.141592653589793238462643383279502884197_dp
            real(kind=4), parameter,optional :: sqrt2=1.41421356237309504880168872420969807856967_sp
            integer, parameter,optional :: sp=kind(1.0)
            real(kind=8), parameter,optional :: pio2_d=1.57079632679489661923132169163975144209858_dp
            real(kind=4), parameter,optional :: pio2=1.57079632679489661923132169163975144209858_sp
            integer, parameter,optional :: i2b=selected_int_kind(4)
            type sprs2_sp ! in :Umpy:nrtype.f90:nrtype
                integer(kind=i4b) :: n
                integer(kind=i4b) :: len_bn
                real(kind=sp), pointer,dimension(:) :: val
                integer(kind=i4b), pointer,dimension(:) :: irow
                integer(kind=i4b), pointer,dimension(:) :: jcol
            end type sprs2_sp
            type sprs2_dp ! in :Umpy:nrtype.f90:nrtype
                integer(kind=i4b) :: n
                integer(kind=i4b) :: len_bn
                real(kind=dp), pointer,dimension(:) :: val
                integer(kind=i4b), pointer,dimension(:) :: irow
                integer(kind=i4b), pointer,dimension(:) :: jcol
            end type sprs2_dp
        end module nrtype
        module nr ! in :Umpy:nr.f90
            interface  ! in :Umpy:nr.f90:nr
                subroutine airy(x,ai,bi,aip,bip) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: x
                    real(kind=4) intent(out) :: ai
                    real(kind=4) intent(out) :: bi
                    real(kind=4) intent(out) :: aip
                    real(kind=4) intent(out) :: bip
                end subroutine airy
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine amebsa(p,y,pb,yb,ftol,func,iter,temptr) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:),intent(inout) :: p
                    real(kind=4) dimension(:),intent(inout) :: y
                    real(kind=4) dimension(:),intent(inout) :: pb
                    real(kind=4) intent(inout) :: yb
                    real(kind=4) intent(in) :: ftol
                    external func
                    integer(kind=4) intent(inout) :: iter
                    real(kind=4) intent(in) :: temptr
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:amebsa
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:amebsa:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: x
                            real(kind=4) :: func
                        end function func
                    end interface 
                end subroutine amebsa
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine amoeba(p,y,ftol,func,iter) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:),intent(inout) :: p
                    real(kind=4) dimension(:),intent(inout) :: y
                    real(kind=4) intent(in) :: ftol
                    external func
                    integer(kind=4) intent(out) :: iter
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:amoeba
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:amoeba:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: x
                            real(kind=4) :: func
                        end function func
                    end interface 
                end subroutine amoeba
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine anneal(x,y,iorder) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(:),intent(in) :: y
                    integer(kind=4) dimension(:),intent(inout) :: iorder
                end subroutine anneal
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine asolve(b,x,itrnsp) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=8) dimension(:),intent(in) :: b
                    real(kind=8) dimension(:),intent(out) :: x
                    integer(kind=4) intent(in) :: itrnsp
                end subroutine asolve
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine atimes(x,r,itrnsp) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=8) dimension(:),intent(in) :: x
                    real(kind=8) dimension(:),intent(out) :: r
                    integer(kind=4) intent(in) :: itrnsp
                end subroutine atimes
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine avevar(data,ave,var) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: data
                    real(kind=4) intent(out) :: ave
                    real(kind=4) intent(out) :: var
                end subroutine avevar
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine balanc(a) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:),intent(inout) :: a
                end subroutine balanc
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine banbks(a,m1,m2,al,indx,b) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:),intent(in) :: a
                    integer(kind=4) intent(in) :: m1
                    integer(kind=4) intent(in) :: m2
                    real(kind=4) dimension(:,:),intent(in) :: al
                    integer(kind=4) dimension(:),intent(in) :: indx
                    real(kind=4) dimension(:),intent(inout) :: b
                end subroutine banbks
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine bandec(a,m1,m2,al,indx,d) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:),intent(inout) :: a
                    integer(kind=4) intent(in) :: m1
                    integer(kind=4) intent(in) :: m2
                    real(kind=4) dimension(:,:),intent(out) :: al
                    integer(kind=4) dimension(:),intent(out) :: indx
                    real(kind=4) intent(out) :: d
                end subroutine bandec
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine banmul(a,m1,m2,x,b) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:),intent(in) :: a
                    integer(kind=4) intent(in) :: m1
                    integer(kind=4) intent(in) :: m2
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(:),intent(out) :: b
                end subroutine banmul
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine bcucof(y,y1,y2,y12,d1,d2,c) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(4),intent(in) :: y
                    real(kind=4) dimension(4),intent(in) :: y1
                    real(kind=4) dimension(4),intent(in) :: y2
                    real(kind=4) dimension(4),intent(in) :: y12
                    real(kind=4) intent(in) :: d1
                    real(kind=4) intent(in) :: d2
                    real(kind=4) dimension(4,4),intent(out) :: c
                end subroutine bcucof
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine bcuint(y,y1,y2,y12,x1l,x1u,x2l,x2u,x1,x2,ansy,ansy1,ansy2) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(4),intent(in) :: y
                    real(kind=4) dimension(4),intent(in) :: y1
                    real(kind=4) dimension(4),intent(in) :: y2
                    real(kind=4) dimension(4),intent(in) :: y12
                    real(kind=4) intent(in) :: x1l
                    real(kind=4) intent(in) :: x1u
                    real(kind=4) intent(in) :: x2l
                    real(kind=4) intent(in) :: x2u
                    real(kind=4) intent(in) :: x1
                    real(kind=4) intent(in) :: x2
                    real(kind=4) intent(out) :: ansy
                    real(kind=4) intent(out) :: ansy1
                    real(kind=4) intent(out) :: ansy2
                end subroutine bcuint
            end interface 
            interface beschb ! in :Umpy:nr.f90:nr
                subroutine beschb_s(x,gam1,gam2,gampl,gammi) ! in :Umpy:nr.f90:nr:beschb
                    use nrtype
                    real(kind=8) intent(in) :: x
                    real(kind=8) intent(out) :: gam1
                    real(kind=8) intent(out) :: gam2
                    real(kind=8) intent(out) :: gampl
                    real(kind=8) intent(out) :: gammi
                end subroutine beschb_s
                subroutine beschb_v(x,gam1,gam2,gampl,gammi) ! in :Umpy:nr.f90:nr:beschb
                    use nrtype
                    real(kind=8) dimension(:),intent(in) :: x
                    real(kind=8) dimension(:),intent(out) :: gam1
                    real(kind=8) dimension(:),intent(out) :: gam2
                    real(kind=8) dimension(:),intent(out) :: gampl
                    real(kind=8) dimension(:),intent(out) :: gammi
                end subroutine beschb_v
            end interface beschb
            interface bessi ! in :Umpy:nr.f90:nr
                function bessi_s(n,x) ! in :Umpy:nr.f90:nr:bessi
                    use nrtype
                    integer(kind=4) intent(in) :: n
                    real(kind=4) intent(in) :: x
                    real(kind=4) :: bessi_s
                end function bessi_s
                function bessi_v(n,x) ! in :Umpy:nr.f90:nr:bessi
                    use nrtype
                    integer(kind=4) intent(in) :: n
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(size(x)) :: bessi_v
                end function bessi_v
            end interface bessi
            interface bessi0 ! in :Umpy:nr.f90:nr
                function bessi0_s(x) ! in :Umpy:nr.f90:nr:bessi0
                    use nrtype
                    real(kind=4) intent(in) :: x
                    real(kind=4) :: bessi0_s
                end function bessi0_s
                function bessi0_v(x) ! in :Umpy:nr.f90:nr:bessi0
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(size(x)) :: bessi0_v
                end function bessi0_v
            end interface bessi0
            interface bessi1 ! in :Umpy:nr.f90:nr
                function bessi1_s(x) ! in :Umpy:nr.f90:nr:bessi1
                    use nrtype
                    real(kind=4) intent(in) :: x
                    real(kind=4) :: bessi1_s
                end function bessi1_s
                function bessi1_v(x) ! in :Umpy:nr.f90:nr:bessi1
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(size(x)) :: bessi1_v
                end function bessi1_v
            end interface bessi1
            interface  ! in :Umpy:nr.f90:nr
                subroutine bessik(x,xnu,ri,rk,rip,rkp) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: x
                    real(kind=4) intent(in) :: xnu
                    real(kind=4) intent(out) :: ri
                    real(kind=4) intent(out) :: rk
                    real(kind=4) intent(out) :: rip
                    real(kind=4) intent(out) :: rkp
                end subroutine bessik
            end interface 
            interface bessj ! in :Umpy:nr.f90:nr
                function bessj_s(n,x) ! in :Umpy:nr.f90:nr:bessj
                    use nrtype
                    integer(kind=4) intent(in) :: n
                    real(kind=4) intent(in) :: x
                    real(kind=4) :: bessj_s
                end function bessj_s
                function bessj_v(n,x) ! in :Umpy:nr.f90:nr:bessj
                    use nrtype
                    integer(kind=4) intent(in) :: n
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(size(x)) :: bessj_v
                end function bessj_v
            end interface bessj
            interface bessj0 ! in :Umpy:nr.f90:nr
                function bessj0_s(x) ! in :Umpy:nr.f90:nr:bessj0
                    use nrtype
                    real(kind=4) intent(in) :: x
                    real(kind=4) :: bessj0_s
                end function bessj0_s
                function bessj0_v(x) ! in :Umpy:nr.f90:nr:bessj0
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(size(x)) :: bessj0_v
                end function bessj0_v
            end interface bessj0
            interface bessj1 ! in :Umpy:nr.f90:nr
                function bessj1_s(x) ! in :Umpy:nr.f90:nr:bessj1
                    use nrtype
                    real(kind=4) intent(in) :: x
                    real(kind=4) :: bessj1_s
                end function bessj1_s
                function bessj1_v(x) ! in :Umpy:nr.f90:nr:bessj1
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(size(x)) :: bessj1_v
                end function bessj1_v
            end interface bessj1
            interface bessjy ! in :Umpy:nr.f90:nr
                subroutine bessjy_s(x,xnu,rj,ry,rjp,ryp) ! in :Umpy:nr.f90:nr:bessjy
                    use nrtype
                    real(kind=4) intent(in) :: x
                    real(kind=4) intent(in) :: xnu
                    real(kind=4) intent(out) :: rj
                    real(kind=4) intent(out) :: ry
                    real(kind=4) intent(out) :: rjp
                    real(kind=4) intent(out) :: ryp
                end subroutine bessjy_s
                subroutine bessjy_v(x,xnu,rj,ry,rjp,ryp) ! in :Umpy:nr.f90:nr:bessjy
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) intent(in) :: xnu
                    real(kind=4) dimension(:),intent(out) :: rj
                    real(kind=4) dimension(:),intent(out) :: ry
                    real(kind=4) dimension(:),intent(out) :: rjp
                    real(kind=4) dimension(:),intent(out) :: ryp
                end subroutine bessjy_v
            end interface bessjy
            interface bessk ! in :Umpy:nr.f90:nr
                function bessk_s(n,x) ! in :Umpy:nr.f90:nr:bessk
                    use nrtype
                    integer(kind=4) intent(in) :: n
                    real(kind=4) intent(in) :: x
                    real(kind=4) :: bessk_s
                end function bessk_s
                function bessk_v(n,x) ! in :Umpy:nr.f90:nr:bessk
                    use nrtype
                    integer(kind=4) intent(in) :: n
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(size(x)) :: bessk_v
                end function bessk_v
            end interface bessk
            interface bessk0 ! in :Umpy:nr.f90:nr
                function bessk0_s(x) ! in :Umpy:nr.f90:nr:bessk0
                    use nrtype
                    real(kind=4) intent(in) :: x
                    real(kind=4) :: bessk0_s
                end function bessk0_s
                function bessk0_v(x) ! in :Umpy:nr.f90:nr:bessk0
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(size(x)) :: bessk0_v
                end function bessk0_v
            end interface bessk0
            interface bessk1 ! in :Umpy:nr.f90:nr
                function bessk1_s(x) ! in :Umpy:nr.f90:nr:bessk1
                    use nrtype
                    real(kind=4) intent(in) :: x
                    real(kind=4) :: bessk1_s
                end function bessk1_s
                function bessk1_v(x) ! in :Umpy:nr.f90:nr:bessk1
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(size(x)) :: bessk1_v
                end function bessk1_v
            end interface bessk1
            interface bessy ! in :Umpy:nr.f90:nr
                function bessy_s(n,x) ! in :Umpy:nr.f90:nr:bessy
                    use nrtype
                    integer(kind=4) intent(in) :: n
                    real(kind=4) intent(in) :: x
                    real(kind=4) :: bessy_s
                end function bessy_s
                function bessy_v(n,x) ! in :Umpy:nr.f90:nr:bessy
                    use nrtype
                    integer(kind=4) intent(in) :: n
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(size(x)) :: bessy_v
                end function bessy_v
            end interface bessy
            interface bessy0 ! in :Umpy:nr.f90:nr
                function bessy0_s(x) ! in :Umpy:nr.f90:nr:bessy0
                    use nrtype
                    real(kind=4) intent(in) :: x
                    real(kind=4) :: bessy0_s
                end function bessy0_s
                function bessy0_v(x) ! in :Umpy:nr.f90:nr:bessy0
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(size(x)) :: bessy0_v
                end function bessy0_v
            end interface bessy0
            interface bessy1 ! in :Umpy:nr.f90:nr
                function bessy1_s(x) ! in :Umpy:nr.f90:nr:bessy1
                    use nrtype
                    real(kind=4) intent(in) :: x
                    real(kind=4) :: bessy1_s
                end function bessy1_s
                function bessy1_v(x) ! in :Umpy:nr.f90:nr:bessy1
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(size(x)) :: bessy1_v
                end function bessy1_v
            end interface bessy1
            interface beta ! in :Umpy:nr.f90:nr
                function beta_s(z,w) ! in :Umpy:nr.f90:nr:beta
                    use nrtype
                    real(kind=4) intent(in) :: z
                    real(kind=4) intent(in) :: w
                    real(kind=4) :: beta_s
                end function beta_s
                function beta_v(z,w) ! in :Umpy:nr.f90:nr:beta
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: z
                    real(kind=4) dimension(:),intent(in) :: w
                    real(kind=4) dimension(size(z)) :: beta_v
                end function beta_v
            end interface beta
            interface betacf ! in :Umpy:nr.f90:nr
                function betacf_s(a,b,x) ! in :Umpy:nr.f90:nr:betacf
                    use nrtype
                    real(kind=4) intent(in) :: a
                    real(kind=4) intent(in) :: b
                    real(kind=4) intent(in) :: x
                    real(kind=4) :: betacf_s
                end function betacf_s
                function betacf_v(a,b,x) ! in :Umpy:nr.f90:nr:betacf
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: a
                    real(kind=4) dimension(:),intent(in) :: b
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(size(x)) :: betacf_v
                end function betacf_v
            end interface betacf
            interface betai ! in :Umpy:nr.f90:nr
                function betai_s(a,b,x) ! in :Umpy:nr.f90:nr:betai
                    use nrtype
                    real(kind=4) intent(in) :: a
                    real(kind=4) intent(in) :: b
                    real(kind=4) intent(in) :: x
                    real(kind=4) :: betai_s
                end function betai_s
                function betai_v(a,b,x) ! in :Umpy:nr.f90:nr:betai
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: a
                    real(kind=4) dimension(:),intent(in) :: b
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(size(a)) :: betai_v
                end function betai_v
            end interface betai
            interface bico ! in :Umpy:nr.f90:nr
                function bico_s(n,k) ! in :Umpy:nr.f90:nr:bico
                    use nrtype
                    integer(kind=4) intent(in) :: n
                    integer(kind=4) intent(in) :: k
                    real(kind=4) :: bico_s
                end function bico_s
                function bico_v(n,k) ! in :Umpy:nr.f90:nr:bico
                    use nrtype
                    integer(kind=4) dimension(:),intent(in) :: n
                    integer(kind=4) dimension(:),intent(in) :: k
                    real(kind=4) dimension(size(n)) :: bico_v
                end function bico_v
            end interface bico
            interface  ! in :Umpy:nr.f90:nr
                function bnldev(pp,n) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: pp
                    integer(kind=4) intent(in) :: n
                    real(kind=4) :: bnldev
                end function bnldev
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function brent(ax,bx,cx,func,tol,xmin) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: ax
                    real(kind=4) intent(in) :: bx
                    real(kind=4) intent(in) :: cx
                    external func
                    real(kind=4) intent(in) :: tol
                    real(kind=4) intent(out) :: xmin
                    real(kind=4) :: brent
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:brent
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:brent:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) :: func
                        end function func
                    end interface 
                end function brent
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine broydn(x,check) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: x
                    logical(kind=kind(.true.)) intent(out) :: check
                end subroutine broydn
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine bsstep(y,dydx,x,htry,eps,yscal,hdid,hnext,derivs) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: y
                    real(kind=4) dimension(:),intent(in) :: dydx
                    real(kind=4) intent(inout) :: x
                    real(kind=4) intent(in) :: htry
                    real(kind=4) intent(in) :: eps
                    real(kind=4) dimension(:),intent(in) :: yscal
                    real(kind=4) intent(out) :: hdid
                    real(kind=4) intent(out) :: hnext
                    external derivs
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:bsstep
                        subroutine derivs(x,y,dydx) ! in :Umpy:nr.f90:nr:unknown_interface:bsstep:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) dimension(:),intent(in) :: y
                            real(kind=4) dimension(:),intent(out) :: dydx
                        end subroutine derivs
                    end interface 
                end subroutine bsstep
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine caldat(julian,mm,id,iyyy) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    integer(kind=4) intent(in) :: julian
                    integer(kind=4) intent(out) :: mm
                    integer(kind=4) intent(out) :: id
                    integer(kind=4) intent(out) :: iyyy
                end subroutine caldat
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function chder(a,b,c) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: a
                    real(kind=4) intent(in) :: b
                    real(kind=4) dimension(:),intent(in) :: c
                    real(kind=4) dimension(size(c)) :: chder
                end function chder
            end interface 
            interface chebev ! in :Umpy:nr.f90:nr
                function chebev_s(a,b,c,x) ! in :Umpy:nr.f90:nr:chebev
                    use nrtype
                    real(kind=4) intent(in) :: a
                    real(kind=4) intent(in) :: b
                    real(kind=4) dimension(:),intent(in) :: c
                    real(kind=4) intent(in) :: x
                    real(kind=4) :: chebev_s
                end function chebev_s
                function chebev_v(a,b,c,x) ! in :Umpy:nr.f90:nr:chebev
                    use nrtype
                    real(kind=4) intent(in) :: a
                    real(kind=4) intent(in) :: b
                    real(kind=4) dimension(:),intent(in) :: c
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(size(x)) :: chebev_v
                end function chebev_v
            end interface chebev
            interface  ! in :Umpy:nr.f90:nr
                function chebft(a,b,n,func) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: a
                    real(kind=4) intent(in) :: b
                    integer(kind=4) intent(in) :: n
                    external func
                    real(kind=4) dimension(n) :: chebft
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:chebft
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:chebft:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: x
                            real(kind=4) dimension(size(x)) :: func
                        end function func
                    end interface 
                end function chebft
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function chebpc(c) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: c
                    real(kind=4) dimension(size(c)) :: chebpc
                end function chebpc
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function chint(a,b,c) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: a
                    real(kind=4) intent(in) :: b
                    real(kind=4) dimension(:),intent(in) :: c
                    real(kind=4) dimension(size(c)) :: chint
                end function chint
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine choldc(a,p) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:),intent(inout) :: a
                    real(kind=4) dimension(:),intent(out) :: p
                end subroutine choldc
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine cholsl(a,p,b,x) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:),intent(in) :: a
                    real(kind=4) dimension(:),intent(in) :: p
                    real(kind=4) dimension(:),intent(in) :: b
                    real(kind=4) dimension(:),intent(inout) :: x
                end subroutine cholsl
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine chsone(bins,ebins,knstrn,df,chsq,prob) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: bins
                    real(kind=4) dimension(:),intent(in) :: ebins
                    integer(kind=4) intent(in) :: knstrn
                    real(kind=4) intent(out) :: df
                    real(kind=4) intent(out) :: chsq
                    real(kind=4) intent(out) :: prob
                end subroutine chsone
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine chstwo(bins1,bins2,knstrn,df,chsq,prob) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: bins1
                    real(kind=4) dimension(:),intent(in) :: bins2
                    integer(kind=4) intent(in) :: knstrn
                    real(kind=4) intent(out) :: df
                    real(kind=4) intent(out) :: chsq
                    real(kind=4) intent(out) :: prob
                end subroutine chstwo
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine cisi(x,ci,si) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: x
                    real(kind=4) intent(out) :: ci
                    real(kind=4) intent(out) :: si
                end subroutine cisi
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine cntab1(nn,chisq,df,prob,cramrv,ccc) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    integer(kind=4) dimension(:,:),intent(in) :: nn
                    real(kind=4) intent(out) :: chisq
                    real(kind=4) intent(out) :: df
                    real(kind=4) intent(out) :: prob
                    real(kind=4) intent(out) :: cramrv
                    real(kind=4) intent(out) :: ccc
                end subroutine cntab1
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine cntab2(nn,h,hx,hy,hygx,hxgy,uygx,uxgy,uxy) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    integer(kind=4) dimension(:,:),intent(in) :: nn
                    real(kind=4) intent(out) :: h
                    real(kind=4) intent(out) :: hx
                    real(kind=4) intent(out) :: hy
                    real(kind=4) intent(out) :: hygx
                    real(kind=4) intent(out) :: hxgy
                    real(kind=4) intent(out) :: uygx
                    real(kind=4) intent(out) :: uxgy
                    real(kind=4) intent(out) :: uxy
                end subroutine cntab2
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function convlv(data,respns,isign) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: data
                    real(kind=4) dimension(:),intent(in) :: respns
                    integer(kind=4) intent(in) :: isign
                    real(kind=4) dimension(size(data)) :: convlv
                end function convlv
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function correl(data1,data2) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: data1
                    real(kind=4) dimension(:),intent(in) :: data2
                    real(kind=4) dimension(size(data1)) :: correl
                end function correl
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine cosft1(y) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: y
                end subroutine cosft1
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine cosft2(y,isign) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: y
                    integer(kind=4) intent(in) :: isign
                end subroutine cosft2
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine covsrt(covar,maska) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:),intent(inout) :: covar
                    logical(kind=kind(.true.)) dimension(:),intent(in) :: maska
                end subroutine covsrt
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine cyclic(a,b,c,alpha,beta,r,x) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: a
                    real(kind=4) dimension(:),intent(in) :: b
                    real(kind=4) dimension(:),intent(in) :: c
                    real(kind=4) intent(in) :: alpha
                    real(kind=4) intent(in) :: beta
                    real(kind=4) dimension(:),intent(in) :: r
                    real(kind=4) dimension(:),intent(out) :: x
                end subroutine cyclic
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine daub4(a,isign) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: a
                    integer(kind=4) intent(in) :: isign
                end subroutine daub4
            end interface 
            interface dawson ! in :Umpy:nr.f90:nr
                function dawson_s(x) ! in :Umpy:nr.f90:nr:dawson
                    use nrtype
                    real(kind=4) intent(in) :: x
                    real(kind=4) :: dawson_s
                end function dawson_s
                function dawson_v(x) ! in :Umpy:nr.f90:nr:dawson
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(size(x)) :: dawson_v
                end function dawson_v
            end interface dawson
            interface  ! in :Umpy:nr.f90:nr
                function dbrent(ax,bx,cx,func,dbrent_dfunc,tol,xmin) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: ax
                    real(kind=4) intent(in) :: bx
                    real(kind=4) intent(in) :: cx
                    external func
                    external dbrent_dfunc
                    real(kind=4) intent(in) :: tol
                    real(kind=4) intent(out) :: xmin
                    real(kind=4) :: dbrent
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:dbrent
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:dbrent:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) :: func
                        end function func
                        function dbrent_dfunc(x) ! in :Umpy:nr.f90:nr:unknown_interface:dbrent:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) :: dbrent_dfunc
                        end function dbrent_dfunc
                    end interface 
                end function dbrent
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine ddpoly(c,x,pd) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: c
                    real(kind=4) intent(in) :: x
                    real(kind=4) dimension(:),intent(out) :: pd
                end subroutine ddpoly
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function decchk(string_bn,ch) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    character(len=1) dimension(:),intent(in) :: string_bn
                    character*1 intent(out) :: ch
                    logical(kind=kind(.true.)) :: decchk
                end function decchk
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine dfpmin(p,gtol,iter,fret,func,dfunc) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: p
                    real(kind=4) intent(in) :: gtol
                    integer(kind=4) intent(out) :: iter
                    real(kind=4) intent(out) :: fret
                    external func
                    external dfunc
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:dfpmin
                        function func(p) ! in :Umpy:nr.f90:nr:unknown_interface:dfpmin:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: p
                            real(kind=4) :: func
                        end function func
                        function dfunc(p) ! in :Umpy:nr.f90:nr:unknown_interface:dfpmin:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: p
                            real(kind=4) dimension(size(p)) :: dfunc
                        end function dfunc
                    end interface 
                end subroutine dfpmin
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function dfridr(func,x,h,err) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    external func
                    real(kind=4) intent(in) :: x
                    real(kind=4) intent(in) :: h
                    real(kind=4) intent(out) :: err
                    real(kind=4) :: dfridr
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:dfridr
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:dfridr:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) :: func
                        end function func
                    end interface 
                end function dfridr
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine dftcor(w,delta,a,b,endpts,corre,corim,corfac) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: w
                    real(kind=4) intent(in) :: delta
                    real(kind=4) intent(in) :: a
                    real(kind=4) intent(in) :: b
                    real(kind=4) dimension(:),intent(in) :: endpts
                    real(kind=4) intent(out) :: corre
                    real(kind=4) intent(out) :: corim
                    real(kind=4) intent(out) :: corfac
                end subroutine dftcor
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine dftint(func,a,b,w,cosint,sinint) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    external func
                    real(kind=4) intent(in) :: a
                    real(kind=4) intent(in) :: b
                    real(kind=4) intent(in) :: w
                    real(kind=4) intent(out) :: cosint
                    real(kind=4) intent(out) :: sinint
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:dftint
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:dftint:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: x
                            real(kind=4) dimension(size(x)) :: func
                        end function func
                    end interface 
                end subroutine dftint
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine difeq(k,k1,k2,jsf,is1,isf,indexv,s,y) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    integer(kind=4) intent(in) :: k
                    integer(kind=4) intent(in) :: k1
                    integer(kind=4) intent(in) :: k2
                    integer(kind=4) intent(in) :: jsf
                    integer(kind=4) intent(in) :: is1
                    integer(kind=4) intent(in) :: isf
                    integer(kind=4) dimension(:),intent(in) :: indexv
                    real(kind=4) dimension(:,:),intent(out) :: s
                    real(kind=4) dimension(:,:),intent(in) :: y
                end subroutine difeq
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function eclass(lista,listb,n) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    integer(kind=4) dimension(:),intent(in) :: lista
                    integer(kind=4) dimension(:),intent(in) :: listb
                    integer(kind=4) intent(in) :: n
                    integer(kind=4) dimension(n) :: eclass
                end function eclass
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function eclazz(equiv,n) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    external equiv
                    integer(kind=4) intent(in) :: n
                    integer(kind=4) dimension(n) :: eclazz
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:eclazz
                        function equiv(i,j) ! in :Umpy:nr.f90:nr:unknown_interface:eclazz:unknown_interface
                            use nrtype
                            integer(kind=4) intent(in) :: i
                            integer(kind=4) intent(in) :: j
                            logical(kind=kind(.true.)) :: equiv
                        end function equiv
                    end interface 
                end function eclazz
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function ei(x) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: x
                    real(kind=4) :: ei
                end function ei
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine eigsrt(d,v) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: d
                    real(kind=4) dimension(:,:),intent(inout) :: v
                end subroutine eigsrt
            end interface 
            interface elle ! in :Umpy:nr.f90:nr
                function elle_s(phi,ak) ! in :Umpy:nr.f90:nr:elle
                    use nrtype
                    real(kind=4) intent(in) :: phi
                    real(kind=4) intent(in) :: ak
                    real(kind=4) :: elle_s
                end function elle_s
                function elle_v(phi,ak) ! in :Umpy:nr.f90:nr:elle
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: phi
                    real(kind=4) dimension(:),intent(in) :: ak
                    real(kind=4) dimension(size(phi)) :: elle_v
                end function elle_v
            end interface elle
            interface ellf ! in :Umpy:nr.f90:nr
                function ellf_s(phi,ak) ! in :Umpy:nr.f90:nr:ellf
                    use nrtype
                    real(kind=4) intent(in) :: phi
                    real(kind=4) intent(in) :: ak
                    real(kind=4) :: ellf_s
                end function ellf_s
                function ellf_v(phi,ak) ! in :Umpy:nr.f90:nr:ellf
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: phi
                    real(kind=4) dimension(:),intent(in) :: ak
                    real(kind=4) dimension(size(phi)) :: ellf_v
                end function ellf_v
            end interface ellf
            interface ellpi ! in :Umpy:nr.f90:nr
                function ellpi_s(phi,en,ak) ! in :Umpy:nr.f90:nr:ellpi
                    use nrtype
                    real(kind=4) intent(in) :: phi
                    real(kind=4) intent(in) :: en
                    real(kind=4) intent(in) :: ak
                    real(kind=4) :: ellpi_s
                end function ellpi_s
                function ellpi_v(phi,en,ak) ! in :Umpy:nr.f90:nr:ellpi
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: phi
                    real(kind=4) dimension(:),intent(in) :: en
                    real(kind=4) dimension(:),intent(in) :: ak
                    real(kind=4) dimension(size(phi)) :: ellpi_v
                end function ellpi_v
            end interface ellpi
            interface  ! in :Umpy:nr.f90:nr
                subroutine elmhes(a) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:),intent(inout) :: a
                end subroutine elmhes
            end interface 
            interface erf ! in :Umpy:nr.f90:nr
                function erf_s(x) ! in :Umpy:nr.f90:nr:erf
                    use nrtype
                    real(kind=4) intent(in) :: x
                    real(kind=4) :: erf_s
                end function erf_s
                function erf_v(x) ! in :Umpy:nr.f90:nr:erf
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(size(x)) :: erf_v
                end function erf_v
            end interface erf
            interface erfc ! in :Umpy:nr.f90:nr
                function erfc_s(x) ! in :Umpy:nr.f90:nr:erfc
                    use nrtype
                    real(kind=4) intent(in) :: x
                    real(kind=4) :: erfc_s
                end function erfc_s
                function erfc_v(x) ! in :Umpy:nr.f90:nr:erfc
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(size(x)) :: erfc_v
                end function erfc_v
            end interface erfc
            interface erfcc ! in :Umpy:nr.f90:nr
                function erfcc_s(x) ! in :Umpy:nr.f90:nr:erfcc
                    use nrtype
                    real(kind=4) intent(in) :: x
                    real(kind=4) :: erfcc_s
                end function erfcc_s
                function erfcc_v(x) ! in :Umpy:nr.f90:nr:erfcc
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(size(x)) :: erfcc_v
                end function erfcc_v
            end interface erfcc
            interface  ! in :Umpy:nr.f90:nr
                subroutine eulsum(sum,term,jterm) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(inout) :: sum
                    real(kind=4) intent(in) :: term
                    integer(kind=4) intent(in) :: jterm
                end subroutine eulsum
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function evlmem(fdt,d,xms) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: fdt
                    real(kind=4) dimension(:),intent(in) :: d
                    real(kind=4) intent(in) :: xms
                    real(kind=4) :: evlmem
                end function evlmem
            end interface 
            interface expdev ! in :Umpy:nr.f90:nr
                subroutine expdev_s(harvest) ! in :Umpy:nr.f90:nr:expdev
                    use nrtype
                    real(kind=4) intent(out) :: harvest
                end subroutine expdev_s
                subroutine expdev_v(harvest) ! in :Umpy:nr.f90:nr:expdev
                    use nrtype
                    real(kind=4) dimension(:),intent(out) :: harvest
                end subroutine expdev_v
            end interface expdev
            interface  ! in :Umpy:nr.f90:nr
                function expint(n,x) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    integer(kind=4) intent(in) :: n
                    real(kind=4) intent(in) :: x
                    real(kind=4) :: expint
                end function expint
            end interface 
            interface factln ! in :Umpy:nr.f90:nr
                function factln_s(n) ! in :Umpy:nr.f90:nr:factln
                    use nrtype
                    integer(kind=4) intent(in) :: n
                    real(kind=4) :: factln_s
                end function factln_s
                function factln_v(n) ! in :Umpy:nr.f90:nr:factln
                    use nrtype
                    integer(kind=4) dimension(:),intent(in) :: n
                    real(kind=4) dimension(size(n)) :: factln_v
                end function factln_v
            end interface factln
            interface factrl ! in :Umpy:nr.f90:nr
                function factrl_s(n) ! in :Umpy:nr.f90:nr:factrl
                    use nrtype
                    integer(kind=4) intent(in) :: n
                    real(kind=4) :: factrl_s
                end function factrl_s
                function factrl_v(n) ! in :Umpy:nr.f90:nr:factrl
                    use nrtype
                    integer(kind=4) dimension(:),intent(in) :: n
                    real(kind=4) dimension(size(n)) :: factrl_v
                end function factrl_v
            end interface factrl
            interface  ! in :Umpy:nr.f90:nr
                subroutine fasper(x,y,ofac,hifac,px,py,jmax,prob) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(:),intent(in) :: y
                    real(kind=4) intent(in) :: ofac
                    real(kind=4) intent(in) :: hifac
                    real(kind=4), pointer,dimension(:) :: px
                    real(kind=4), pointer,dimension(:) :: py
                    integer(kind=4) intent(out) :: jmax
                    real(kind=4) intent(out) :: prob
                end subroutine fasper
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine fdjac(x,fvec,df) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: x
                    real(kind=4) dimension(:),intent(in) :: fvec
                    real(kind=4) dimension(:,:),intent(out) :: df
                end subroutine fdjac
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine fgauss(x,a,y,dyda) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(:),intent(in) :: a
                    real(kind=4) dimension(:),intent(out) :: y
                    real(kind=4) dimension(:,:),intent(out) :: dyda
                end subroutine fgauss
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine fit(x,y,a,b,siga,sigb,chi2,q,sig) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(:),intent(in) :: y
                    real(kind=4) intent(out) :: a
                    real(kind=4) intent(out) :: b
                    real(kind=4) intent(out) :: siga
                    real(kind=4) intent(out) :: sigb
                    real(kind=4) intent(out) :: chi2
                    real(kind=4) intent(out) :: q
                    real(kind=4), optional,dimension(:),intent(in) :: sig
                end subroutine fit
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine fitexy(x,y,sigx,sigy,a,b,siga,sigb,chi2,q) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(:),intent(in) :: y
                    real(kind=4) dimension(:),intent(in) :: sigx
                    real(kind=4) dimension(:),intent(in) :: sigy
                    real(kind=4) intent(out) :: a
                    real(kind=4) intent(out) :: b
                    real(kind=4) intent(out) :: siga
                    real(kind=4) intent(out) :: sigb
                    real(kind=4) intent(out) :: chi2
                    real(kind=4) intent(out) :: q
                end subroutine fitexy
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine fixrts(d) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: d
                end subroutine fixrts
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function fleg(x,n) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: x
                    integer(kind=4) intent(in) :: n
                    real(kind=4) dimension(n) :: fleg
                end function fleg
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine flmoon(n,nph,jd,frac) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    integer(kind=4) intent(in) :: n
                    integer(kind=4) intent(in) :: nph
                    integer(kind=4) intent(out) :: jd
                    real(kind=4) intent(out) :: frac
                end subroutine flmoon
            end interface 
            interface four1 ! in :Umpy:nr.f90:nr
                subroutine four1_dp(data,isign) ! in :Umpy:nr.f90:nr:four1
                    use nrtype
                    complex(kind=kind((1.0d0,1.0d0))) dimension(:),intent(inout) :: data
                    integer(kind=4) intent(in) :: isign
                end subroutine four1_dp
                subroutine four1_sp(data,isign) ! in :Umpy:nr.f90:nr:four1
                    use nrtype
                    complex(kind=kind((1.0,1.0))) dimension(:),intent(inout) :: data
                    integer(kind=4) intent(in) :: isign
                end subroutine four1_sp
            end interface four1
            interface  ! in :Umpy:nr.f90:nr
                subroutine four1_alt(data,isign) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    complex(kind=kind((1.0,1.0))) dimension(:),intent(inout) :: data
                    integer(kind=4) intent(in) :: isign
                end subroutine four1_alt
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine four1_gather(data,isign) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    complex(kind=kind((1.0,1.0))) dimension(:),intent(inout) :: data
                    integer(kind=4) intent(in) :: isign
                end subroutine four1_gather
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine four2(data,isign) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    complex(kind=kind((1.0,1.0))) dimension(:,:),intent(inout) :: data
                    integer(kind=4) intent(in) :: isign
                end subroutine four2
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine four2_alt(data,isign) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    complex(kind=kind((1.0,1.0))) dimension(:,:),intent(inout) :: data
                    integer(kind=4) intent(in) :: isign
                end subroutine four2_alt
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine four3(data,isign) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    complex(kind=kind((1.0,1.0))) dimension(:,:,:),intent(inout) :: data
                    integer(kind=4) intent(in) :: isign
                end subroutine four3
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine four3_alt(data,isign) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    complex(kind=kind((1.0,1.0))) dimension(:,:,:),intent(inout) :: data
                    integer(kind=4) intent(in) :: isign
                end subroutine four3_alt
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine fourcol(data,isign) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    complex(kind=kind((1.0,1.0))) dimension(:,:),intent(inout) :: data
                    integer(kind=4) intent(in) :: isign
                end subroutine fourcol
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine fourcol_3d(data,isign) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    complex(kind=kind((1.0,1.0))) dimension(:,:,:),intent(inout) :: data
                    integer(kind=4) intent(in) :: isign
                end subroutine fourcol_3d
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine fourn_gather(data,nn,isign) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    complex(kind=kind((1.0,1.0))) dimension(:),intent(inout) :: data
                    integer(kind=4) dimension(:),intent(in) :: nn
                    integer(kind=4) intent(in) :: isign
                end subroutine fourn_gather
            end interface 
            interface fourrow ! in :Umpy:nr.f90:nr
                subroutine fourrow_dp(data,isign) ! in :Umpy:nr.f90:nr:fourrow
                    use nrtype
                    complex(kind=kind((1.0d0,1.0d0))) dimension(:,:),intent(inout) :: data
                    integer(kind=4) intent(in) :: isign
                end subroutine fourrow_dp
                subroutine fourrow_sp(data,isign) ! in :Umpy:nr.f90:nr:fourrow
                    use nrtype
                    complex(kind=kind((1.0,1.0))) dimension(:,:),intent(inout) :: data
                    integer(kind=4) intent(in) :: isign
                end subroutine fourrow_sp
            end interface fourrow
            interface  ! in :Umpy:nr.f90:nr
                subroutine fourrow_3d(data,isign) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    complex(kind=kind((1.0,1.0))) dimension(:,:,:),intent(inout) :: data
                    integer(kind=4) intent(in) :: isign
                end subroutine fourrow_3d
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function fpoly(x,n) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: x
                    integer(kind=4) intent(in) :: n
                    real(kind=4) dimension(n) :: fpoly
                end function fpoly
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine fred2(a,b,t,f,w,g,ak) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: a
                    real(kind=4) intent(in) :: b
                    real(kind=4) dimension(:),intent(out) :: t
                    real(kind=4) dimension(:),intent(out) :: f
                    real(kind=4) dimension(:),intent(out) :: w
                    external g
                    external ak
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:fred2
                        function g(t) ! in :Umpy:nr.f90:nr:unknown_interface:fred2:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: t
                            real(kind=4) dimension(size(t)) :: g
                        end function g
                        function ak(t,s) ! in :Umpy:nr.f90:nr:unknown_interface:fred2:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: t
                            real(kind=4) dimension(:),intent(in) :: s
                            real(kind=4) dimension(size(t),size(s)) :: ak
                        end function ak
                    end interface 
                end subroutine fred2
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function fredin(x,a,b,t,f,w,g,ak) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) intent(in) :: a
                    real(kind=4) intent(in) :: b
                    real(kind=4) dimension(:),intent(in) :: t
                    real(kind=4) dimension(:),intent(in) :: f
                    real(kind=4) dimension(:),intent(in) :: w
                    external g
                    external ak
                    real(kind=4) dimension(size(x)) :: fredin
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:fredin
                        function g(t) ! in :Umpy:nr.f90:nr:unknown_interface:fredin:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: t
                            real(kind=4) dimension(size(t)) :: g
                        end function g
                        function ak(t,s) ! in :Umpy:nr.f90:nr:unknown_interface:fredin:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: t
                            real(kind=4) dimension(:),intent(in) :: s
                            real(kind=4) dimension(size(t),size(s)) :: ak
                        end function ak
                    end interface 
                end function fredin
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine frenel(x,s,c) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: x
                    real(kind=4) intent(out) :: s
                    real(kind=4) intent(out) :: c
                end subroutine frenel
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine frprmn(p,ftol,iter,fret) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: p
                    real(kind=4) intent(in) :: ftol
                    integer(kind=4) intent(out) :: iter
                    real(kind=4) intent(out) :: fret
                end subroutine frprmn
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine ftest(data1,data2,f,prob) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: data1
                    real(kind=4) dimension(:),intent(in) :: data2
                    real(kind=4) intent(out) :: f
                    real(kind=4) intent(out) :: prob
                end subroutine ftest
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function gamdev(ia) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    integer(kind=4) intent(in) :: ia
                    real(kind=4) :: gamdev
                end function gamdev
            end interface 
            interface gammln ! in :Umpy:nr.f90:nr
                function gammln_s(xx) ! in :Umpy:nr.f90:nr:gammln
                    use nrtype
                    real(kind=4) intent(in) :: xx
                    real(kind=4) :: gammln_s
                end function gammln_s
                function gammln_v(xx) ! in :Umpy:nr.f90:nr:gammln
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: xx
                    real(kind=4) dimension(size(xx)) :: gammln_v
                end function gammln_v
            end interface gammln
            interface gammp ! in :Umpy:nr.f90:nr
                function gammp_s(a,x) ! in :Umpy:nr.f90:nr:gammp
                    use nrtype
                    real(kind=4) intent(in) :: a
                    real(kind=4) intent(in) :: x
                    real(kind=4) :: gammp_s
                end function gammp_s
                function gammp_v(a,x) ! in :Umpy:nr.f90:nr:gammp
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: a
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(size(a)) :: gammp_v
                end function gammp_v
            end interface gammp
            interface gammq ! in :Umpy:nr.f90:nr
                function gammq_s(a,x) ! in :Umpy:nr.f90:nr:gammq
                    use nrtype
                    real(kind=4) intent(in) :: a
                    real(kind=4) intent(in) :: x
                    real(kind=4) :: gammq_s
                end function gammq_s
                function gammq_v(a,x) ! in :Umpy:nr.f90:nr:gammq
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: a
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(size(a)) :: gammq_v
                end function gammq_v
            end interface gammq
            interface gasdev ! in :Umpy:nr.f90:nr
                subroutine gasdev_s(harvest) ! in :Umpy:nr.f90:nr:gasdev
                    use nrtype
                    real(kind=4) intent(out) :: harvest
                end subroutine gasdev_s
                subroutine gasdev_v(harvest) ! in :Umpy:nr.f90:nr:gasdev
                    use nrtype
                    real(kind=4) dimension(:),intent(out) :: harvest
                end subroutine gasdev_v
            end interface gasdev
            interface  ! in :Umpy:nr.f90:nr
                subroutine gaucof(a,b,amu0,x,w) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: a
                    real(kind=4) dimension(:),intent(inout) :: b
                    real(kind=4) intent(in) :: amu0
                    real(kind=4) dimension(:),intent(out) :: x
                    real(kind=4) dimension(:),intent(out) :: w
                end subroutine gaucof
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine gauher(x,w) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(out) :: x
                    real(kind=4) dimension(:),intent(out) :: w
                end subroutine gauher
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine gaujac(x,w,alf,bet) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(out) :: x
                    real(kind=4) dimension(:),intent(out) :: w
                    real(kind=4) intent(in) :: alf
                    real(kind=4) intent(in) :: bet
                end subroutine gaujac
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine gaulag(x,w,alf) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(out) :: x
                    real(kind=4) dimension(:),intent(out) :: w
                    real(kind=4) intent(in) :: alf
                end subroutine gaulag
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine gauleg(x1,x2,x,w) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: x1
                    real(kind=4) intent(in) :: x2
                    real(kind=4) dimension(:),intent(out) :: x
                    real(kind=4) dimension(:),intent(out) :: w
                end subroutine gauleg
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine gaussj(a,b) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:),intent(inout) :: a
                    real(kind=4) dimension(:,:),intent(inout) :: b
                end subroutine gaussj
            end interface 
            interface gcf ! in :Umpy:nr.f90:nr
                function gcf_s(a,x,gln) ! in :Umpy:nr.f90:nr:gcf
                    use nrtype
                    real(kind=4) intent(in) :: a
                    real(kind=4) intent(in) :: x
                    real(kind=4), optional,intent(out) :: gln
                    real(kind=4) :: gcf_s
                end function gcf_s
                function gcf_v(a,x,gln) ! in :Umpy:nr.f90:nr:gcf
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: a
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4), optional,dimension(:),intent(out) :: gln
                    real(kind=4) dimension(size(a)) :: gcf_v
                end function gcf_v
            end interface gcf
            interface  ! in :Umpy:nr.f90:nr
                function golden(ax,bx,cx,func,tol,xmin) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: ax
                    real(kind=4) intent(in) :: bx
                    real(kind=4) intent(in) :: cx
                    external func
                    real(kind=4) intent(in) :: tol
                    real(kind=4) intent(out) :: xmin
                    real(kind=4) :: golden
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:golden
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:golden:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) :: func
                        end function func
                    end interface 
                end function golden
            end interface 
            interface gser ! in :Umpy:nr.f90:nr
                function gser_s(a,x,gln) ! in :Umpy:nr.f90:nr:gser
                    use nrtype
                    real(kind=4) intent(in) :: a
                    real(kind=4) intent(in) :: x
                    real(kind=4), optional,intent(out) :: gln
                    real(kind=4) :: gser_s
                end function gser_s
                function gser_v(a,x,gln) ! in :Umpy:nr.f90:nr:gser
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: a
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4), optional,dimension(:),intent(out) :: gln
                    real(kind=4) dimension(size(a)) :: gser_v
                end function gser_v
            end interface gser
            interface  ! in :Umpy:nr.f90:nr
                subroutine hqr(a,wr,wi) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:),intent(inout) :: a
                    real(kind=4) dimension(:),intent(out) :: wr
                    real(kind=4) dimension(:),intent(out) :: wi
                end subroutine hqr
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine hunt(xx,x,jlo) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: xx
                    real(kind=4) intent(in) :: x
                    integer(kind=4) intent(inout) :: jlo
                end subroutine hunt
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine hypdrv(s,ry,rdyds) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: s
                    real(kind=4) dimension(:),intent(in) :: ry
                    real(kind=4) dimension(:),intent(out) :: rdyds
                end subroutine hypdrv
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function hypgeo(a,b,c,z) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    complex(kind=kind((1.0,1.0))) intent(in) :: a
                    complex(kind=kind((1.0,1.0))) intent(in) :: b
                    complex(kind=kind((1.0,1.0))) intent(in) :: c
                    complex(kind=kind((1.0,1.0))) intent(in) :: z
                    complex(kind=kind((1.0,1.0))) :: hypgeo
                end function hypgeo
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine hypser(a,b,c,z,series,deriv) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    complex(kind=kind((1.0,1.0))) intent(in) :: a
                    complex(kind=kind((1.0,1.0))) intent(in) :: b
                    complex(kind=kind((1.0,1.0))) intent(in) :: c
                    complex(kind=kind((1.0,1.0))) intent(in) :: z
                    complex(kind=kind((1.0,1.0))) intent(out) :: series
                    complex(kind=kind((1.0,1.0))) intent(out) :: deriv
                end subroutine hypser
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function icrc(crc,buf,jinit,jrev) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    integer(kind=2) intent(in) :: crc
                    character(len=1) dimension(:),intent(in) :: buf
                    integer(kind=2) intent(in) :: jinit
                    integer(kind=4) intent(in) :: jrev
                    integer(kind=2) :: icrc
                end function icrc
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function igray(n,is) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    integer(kind=4) intent(in) :: n
                    integer(kind=4) intent(in) :: is
                    integer(kind=4) :: igray
                end function igray
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine index_bypack(arr,index_bn,partial) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: arr
                    integer(kind=4) dimension(:),intent(inout) :: index_bn
                    integer, optional,intent(in) :: partial
                end subroutine index_bypack
            end interface 
            interface indexx ! in :Umpy:nr.f90:nr
                subroutine indexx_sp(arr,index_bn) ! in :Umpy:nr.f90:nr:indexx
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: arr
                    integer(kind=4) dimension(:),intent(out) :: index_bn
                end subroutine indexx_sp
                subroutine indexx_i4b(iarr,index_bn) ! in :Umpy:nr.f90:nr:indexx
                    use nrtype
                    integer(kind=4) dimension(:),intent(in) :: iarr
                    integer(kind=4) dimension(:),intent(out) :: index_bn
                end subroutine indexx_i4b
            end interface indexx
            interface  ! in :Umpy:nr.f90:nr
                function interp(uc) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=8) dimension(:,:),intent(in) :: uc
                    real(kind=8) dimension(2*size(uc,1)-1,2*size(uc,1)-1) :: interp
                end function interp
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function rank_bn(indx) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    integer(kind=4) dimension(:),intent(in) :: indx
                    integer(kind=4) dimension(size(indx)) :: rank_bn
                end function rank_bn
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function irbit1(iseed) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    integer(kind=4) intent(inout) :: iseed
                    integer(kind=4) :: irbit1
                end function irbit1
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function irbit2(iseed) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    integer(kind=4) intent(inout) :: iseed
                    integer(kind=4) :: irbit2
                end function irbit2
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine jacobi(a,d,v,nrot) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:),intent(inout) :: a
                    real(kind=4) dimension(:),intent(out) :: d
                    real(kind=4) dimension(:,:),intent(out) :: v
                    integer(kind=4) intent(out) :: nrot
                end subroutine jacobi
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine jacobn(x,y,dfdx,dfdy) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: x
                    real(kind=4) dimension(:),intent(in) :: y
                    real(kind=4) dimension(:),intent(out) :: dfdx
                    real(kind=4) dimension(:,:),intent(out) :: dfdy
                end subroutine jacobn
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function julday(mm,id,iyyy) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    integer(kind=4) intent(in) :: mm
                    integer(kind=4) intent(in) :: id
                    integer(kind=4) intent(in) :: iyyy
                    integer(kind=4) :: julday
                end function julday
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine kendl1(data1,data2,tau,z,prob) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: data1
                    real(kind=4) dimension(:),intent(in) :: data2
                    real(kind=4) intent(out) :: tau
                    real(kind=4) intent(out) :: z
                    real(kind=4) intent(out) :: prob
                end subroutine kendl1
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine kendl2(tab,tau,z,prob) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:),intent(in) :: tab
                    real(kind=4) intent(out) :: tau
                    real(kind=4) intent(out) :: z
                    real(kind=4) intent(out) :: prob
                end subroutine kendl2
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function kermom(y,m) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=8) intent(in) :: y
                    integer(kind=4) intent(in) :: m
                    real(kind=8) dimension(m) :: kermom
                end function kermom
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine ks2d1s(x1,y1,quadvl,d1,prob) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x1
                    real(kind=4) dimension(:),intent(in) :: y1
                    external quadvl
                    real(kind=4) intent(out) :: d1
                    real(kind=4) intent(out) :: prob
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:ks2d1s
                        subroutine quadvl(x,y,fa,fb,fc,fd) ! in :Umpy:nr.f90:nr:unknown_interface:ks2d1s:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) intent(in) :: y
                            real(kind=4) intent(out) :: fa
                            real(kind=4) intent(out) :: fb
                            real(kind=4) intent(out) :: fc
                            real(kind=4) intent(out) :: fd
                        end subroutine quadvl
                    end interface 
                end subroutine ks2d1s
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine ks2d2s(x1,y1,x2,y2,d,prob) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x1
                    real(kind=4) dimension(:),intent(in) :: y1
                    real(kind=4) dimension(:),intent(in) :: x2
                    real(kind=4) dimension(:),intent(in) :: y2
                    real(kind=4) intent(out) :: d
                    real(kind=4) intent(out) :: prob
                end subroutine ks2d2s
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine ksone(data,func,d,prob) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: data
                    external func
                    real(kind=4) intent(out) :: d
                    real(kind=4) intent(out) :: prob
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:ksone
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:ksone:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: x
                            real(kind=4) dimension(size(x)) :: func
                        end function func
                    end interface 
                end subroutine ksone
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine kstwo(data1,data2,d,prob) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: data1
                    real(kind=4) dimension(:),intent(in) :: data2
                    real(kind=4) intent(out) :: d
                    real(kind=4) intent(out) :: prob
                end subroutine kstwo
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine laguer(a,x,its) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    complex(kind=kind((1.0,1.0))) dimension(:),intent(in) :: a
                    complex(kind=kind((1.0,1.0))) intent(inout) :: x
                    integer(kind=4) intent(out) :: its
                end subroutine laguer
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine lfit(x,y,sig,a,maska,covar,chisq,funcs) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(:),intent(in) :: y
                    real(kind=4) dimension(:),intent(in) :: sig
                    real(kind=4) dimension(:),intent(inout) :: a
                    logical(kind=kind(.true.)) dimension(:),intent(in) :: maska
                    real(kind=4) dimension(:,:),intent(inout) :: covar
                    real(kind=4) intent(out) :: chisq
                    external funcs
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:lfit
                        subroutine funcs(x,arr) ! in :Umpy:nr.f90:nr:unknown_interface:lfit:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) dimension(:),intent(out) :: arr
                        end subroutine funcs
                    end interface 
                end subroutine lfit
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine linbcg(b,x,itol,tol,itmax,iter,err) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=8) dimension(:),intent(in) :: b
                    real(kind=8) dimension(:),intent(inout) :: x
                    integer(kind=4) intent(in) :: itol
                    real(kind=8) intent(in) :: tol
                    integer(kind=4) intent(in) :: itmax
                    integer(kind=4) intent(out) :: iter
                    real(kind=8) intent(out) :: err
                end subroutine linbcg
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine linmin(p,xi,fret) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4), target,dimension(:),intent(inout) :: p
                    real(kind=4), target,dimension(:),intent(inout) :: xi
                    real(kind=4) intent(out) :: fret
                end subroutine linmin
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine lnsrch(xold,fold,g,p,x,f,stpmax,check,func) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: xold
                    real(kind=4) intent(in) :: fold
                    real(kind=4) dimension(:),intent(in) :: g
                    real(kind=4) dimension(:),intent(inout) :: p
                    real(kind=4) dimension(:),intent(out) :: x
                    real(kind=4) intent(out) :: f
                    real(kind=4) intent(in) :: stpmax
                    logical(kind=kind(.true.)) intent(out) :: check
                    external func
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:lnsrch
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:lnsrch:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: x
                            real(kind=4) :: func
                        end function func
                    end interface 
                end subroutine lnsrch
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function locate(xx,x) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: xx
                    real(kind=4) intent(in) :: x
                    integer(kind=4) :: locate
                end function locate
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function lop(u) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=8) dimension(:,:),intent(in) :: u
                    real(kind=8) dimension(size(u,1),size(u,1)) :: lop
                end function lop
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine lubksb(a,indx,b) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:),intent(in) :: a
                    integer(kind=4) dimension(:),intent(in) :: indx
                    real(kind=4) dimension(:),intent(inout) :: b
                end subroutine lubksb
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine ludcmp(a,indx,d) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:),intent(inout) :: a
                    integer(kind=4) dimension(:),intent(out) :: indx
                    real(kind=4) intent(out) :: d
                end subroutine ludcmp
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine machar(ibeta,it,irnd,ngrd,machep,negep,iexp,minexp,maxexp,eps,epsneg,xmin,xmax) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    integer(kind=4) intent(out) :: ibeta
                    integer(kind=4) intent(out) :: it
                    integer(kind=4) intent(out) :: irnd
                    integer(kind=4) intent(out) :: ngrd
                    integer(kind=4) intent(out) :: machep
                    integer(kind=4) intent(out) :: negep
                    integer(kind=4) intent(out) :: iexp
                    integer(kind=4) intent(out) :: minexp
                    integer(kind=4) intent(out) :: maxexp
                    real(kind=4) intent(out) :: eps
                    real(kind=4) intent(out) :: epsneg
                    real(kind=4) intent(out) :: xmin
                    real(kind=4) intent(out) :: xmax
                end subroutine machar
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine medfit(x,y,a,b,abdev) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(:),intent(in) :: y
                    real(kind=4) intent(out) :: a
                    real(kind=4) intent(out) :: b
                    real(kind=4) intent(out) :: abdev
                end subroutine medfit
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine memcof(data,xms,d) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: data
                    real(kind=4) intent(out) :: xms
                    real(kind=4) dimension(:),intent(out) :: d
                end subroutine memcof
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine mgfas(u,maxcyc) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=8) dimension(:,:),intent(inout) :: u
                    integer(kind=4) intent(in) :: maxcyc
                end subroutine mgfas
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine mglin(u,ncycle) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=8) dimension(:,:),intent(inout) :: u
                    integer(kind=4) intent(in) :: ncycle
                end subroutine mglin
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine midexp(funk,aa,bb,s,n) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    external funk
                    real(kind=4) intent(in) :: aa
                    real(kind=4) intent(in) :: bb
                    real(kind=4) intent(inout) :: s
                    integer(kind=4) intent(in) :: n
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:midexp
                        function funk(x) ! in :Umpy:nr.f90:nr:unknown_interface:midexp:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: x
                            real(kind=4) dimension(size(x)) :: funk
                        end function funk
                    end interface 
                end subroutine midexp
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine midinf(funk,aa,bb,s,n) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    external funk
                    real(kind=4) intent(in) :: aa
                    real(kind=4) intent(in) :: bb
                    real(kind=4) intent(inout) :: s
                    integer(kind=4) intent(in) :: n
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:midinf
                        function funk(x) ! in :Umpy:nr.f90:nr:unknown_interface:midinf:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: x
                            real(kind=4) dimension(size(x)) :: funk
                        end function funk
                    end interface 
                end subroutine midinf
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine midpnt(func,a,b,s,n) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    external func
                    real(kind=4) intent(in) :: a
                    real(kind=4) intent(in) :: b
                    real(kind=4) intent(inout) :: s
                    integer(kind=4) intent(in) :: n
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:midpnt
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:midpnt:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: x
                            real(kind=4) dimension(size(x)) :: func
                        end function func
                    end interface 
                end subroutine midpnt
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine midsql(funk,aa,bb,s,n) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    external funk
                    real(kind=4) intent(in) :: aa
                    real(kind=4) intent(in) :: bb
                    real(kind=4) intent(inout) :: s
                    integer(kind=4) intent(in) :: n
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:midsql
                        function funk(x) ! in :Umpy:nr.f90:nr:unknown_interface:midsql:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: x
                            real(kind=4) dimension(size(x)) :: funk
                        end function funk
                    end interface 
                end subroutine midsql
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine midsqu(funk,aa,bb,s,n) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    external funk
                    real(kind=4) intent(in) :: aa
                    real(kind=4) intent(in) :: bb
                    real(kind=4) intent(inout) :: s
                    integer(kind=4) intent(in) :: n
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:midsqu
                        function funk(x) ! in :Umpy:nr.f90:nr:unknown_interface:midsqu:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: x
                            real(kind=4) dimension(size(x)) :: funk
                        end function funk
                    end interface 
                end subroutine midsqu
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine miser(func,regn,ndim,npts,dith,ave,var) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    external func
                    real(kind=4) dimension(:),intent(in) :: regn
                    integer(kind=4) intent(in) :: ndim
                    integer(kind=4) intent(in) :: npts
                    real(kind=4) intent(in) :: dith
                    real(kind=4) intent(out) :: ave
                    real(kind=4) intent(out) :: var
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:miser
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:miser:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: x
                            real(kind=4) :: func
                        end function func
                    end interface 
                end subroutine miser
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine mmid(y,dydx,xs,htot,nstep,yout,derivs) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: y
                    real(kind=4) dimension(:),intent(in) :: dydx
                    real(kind=4) intent(in) :: xs
                    real(kind=4) intent(in) :: htot
                    integer(kind=4) intent(in) :: nstep
                    real(kind=4) dimension(:),intent(out) :: yout
                    external derivs
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:mmid
                        subroutine derivs(x,y,dydx) ! in :Umpy:nr.f90:nr:unknown_interface:mmid:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) dimension(:),intent(in) :: y
                            real(kind=4) dimension(:),intent(out) :: dydx
                        end subroutine derivs
                    end interface 
                end subroutine mmid
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine mnbrak(ax,bx,cx,fa,fb,fc,func) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(inout) :: ax
                    real(kind=4) intent(inout) :: bx
                    real(kind=4) intent(out) :: cx
                    real(kind=4) intent(out) :: fa
                    real(kind=4) intent(out) :: fb
                    real(kind=4) intent(out) :: fc
                    external func
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:mnbrak
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:mnbrak:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) :: func
                        end function func
                    end interface 
                end subroutine mnbrak
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine mnewt(ntrial,x,tolx,tolf,usrfun) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    integer(kind=4) intent(in) :: ntrial
                    real(kind=4) dimension(:),intent(inout) :: x
                    real(kind=4) intent(in) :: tolx
                    real(kind=4) intent(in) :: tolf
                    external usrfun
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:mnewt
                        subroutine usrfun(x,fvec,fjac) ! in :Umpy:nr.f90:nr:unknown_interface:mnewt:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: x
                            real(kind=4) dimension(:),intent(out) :: fvec
                            real(kind=4) dimension(:,:),intent(out) :: fjac
                        end subroutine usrfun
                    end interface 
                end subroutine mnewt
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine moment(data,ave,adev,sdev,var,skew,curt) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: data
                    real(kind=4) intent(out) :: ave
                    real(kind=4) intent(out) :: adev
                    real(kind=4) intent(out) :: sdev
                    real(kind=4) intent(out) :: var
                    real(kind=4) intent(out) :: skew
                    real(kind=4) intent(out) :: curt
                end subroutine moment
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine mp2dfr(a,s,n,m) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    character(len=1) dimension(:),intent(inout) :: a
                    character(len=1) dimension(:),intent(out) :: s
                    integer(kind=4) intent(in) :: n
                    integer(kind=4) intent(out) :: m
                end subroutine mp2dfr
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine mpdiv(q,r,u,v,n,m) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    character(len=1) dimension(:),intent(out) :: q
                    character(len=1) dimension(:),intent(out) :: r
                    character(len=1) dimension(:),intent(in) :: u
                    character(len=1) dimension(:),intent(in) :: v
                    integer(kind=4) intent(in) :: n
                    integer(kind=4) intent(in) :: m
                end subroutine mpdiv
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine mpinv(u,v,n,m) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    character(len=1) dimension(:),intent(out) :: u
                    character(len=1) dimension(:),intent(in) :: v
                    integer(kind=4) intent(in) :: n
                    integer(kind=4) intent(in) :: m
                end subroutine mpinv
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine mpmul(w,u,v,n,m) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    character(len=1) dimension(:),intent(out) :: w
                    character(len=1) dimension(:),intent(in) :: u
                    character(len=1) dimension(:),intent(in) :: v
                    integer(kind=4) intent(in) :: n
                    integer(kind=4) intent(in) :: m
                end subroutine mpmul
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine mppi(n) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    integer(kind=4) intent(in) :: n
                end subroutine mppi
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine mprove(a,alud,indx,b,x) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:),intent(in) :: a
                    real(kind=4) dimension(:,:),intent(in) :: alud
                    integer(kind=4) dimension(:),intent(in) :: indx
                    real(kind=4) dimension(:),intent(in) :: b
                    real(kind=4) dimension(:),intent(inout) :: x
                end subroutine mprove
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine mpsqrt(w,u,v,n,m) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    character(len=1) dimension(:),intent(out) :: w
                    character(len=1) dimension(:),intent(out) :: u
                    character(len=1) dimension(:),intent(in) :: v
                    integer(kind=4) intent(in) :: n
                    integer(kind=4) intent(in) :: m
                end subroutine mpsqrt
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine mrqcof(x,y,sig,a,maska,alpha,beta,chisq,funcs) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(:),intent(in) :: y
                    real(kind=4) dimension(:),intent(in) :: sig
                    real(kind=4) dimension(:),intent(in) :: a
                    logical(kind=kind(.true.)) dimension(:),intent(in) :: maska
                    real(kind=4) dimension(:,:),intent(out) :: alpha
                    real(kind=4) dimension(:),intent(out) :: beta
                    real(kind=4) intent(out) :: chisq
                    external funcs
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:mrqcof
                        subroutine funcs(x,a,yfit,dyda) ! in :Umpy:nr.f90:nr:unknown_interface:mrqcof:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: x
                            real(kind=4) dimension(:),intent(in) :: a
                            real(kind=4) dimension(:),intent(out) :: yfit
                            real(kind=4) dimension(:,:),intent(out) :: dyda
                        end subroutine funcs
                    end interface 
                end subroutine mrqcof
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine mrqmin(x,y,sig,a,maska,covar,alpha,chisq,funcs,alamda) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(:),intent(in) :: y
                    real(kind=4) dimension(:),intent(in) :: sig
                    real(kind=4) dimension(:),intent(inout) :: a
                    logical(kind=kind(.true.)) dimension(:),intent(in) :: maska
                    real(kind=4) dimension(:,:),intent(out) :: covar
                    real(kind=4) dimension(:,:),intent(out) :: alpha
                    real(kind=4) intent(out) :: chisq
                    external funcs
                    real(kind=4) intent(inout) :: alamda
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:mrqmin
                        subroutine funcs(x,a,yfit,dyda) ! in :Umpy:nr.f90:nr:unknown_interface:mrqmin:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: x
                            real(kind=4) dimension(:),intent(in) :: a
                            real(kind=4) dimension(:),intent(out) :: yfit
                            real(kind=4) dimension(:,:),intent(out) :: dyda
                        end subroutine funcs
                    end interface 
                end subroutine mrqmin
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine newt(x,check) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: x
                    logical(kind=kind(.true.)) intent(out) :: check
                end subroutine newt
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine odeint(ystart,x1,x2,eps,h1,hmin,derivs,rkqs) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: ystart
                    real(kind=4) intent(in) :: x1
                    real(kind=4) intent(in) :: x2
                    real(kind=4) intent(in) :: eps
                    real(kind=4) intent(in) :: h1
                    real(kind=4) intent(in) :: hmin
                    external derivs
                    external rkqs
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:odeint
                        subroutine derivs(x,y,dydx) ! in :Umpy:nr.f90:nr:unknown_interface:odeint:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) dimension(:),intent(in) :: y
                            real(kind=4) dimension(:),intent(out) :: dydx
                        end subroutine derivs
                        subroutine rkqs(y,dydx,x,htry,eps,yscal,hdid,hnext,derivs) ! in :Umpy:nr.f90:nr:unknown_interface:odeint:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(inout) :: y
                            real(kind=4) dimension(:),intent(in) :: dydx
                            real(kind=4) intent(inout) :: x
                            real(kind=4) intent(in) :: htry
                            real(kind=4) intent(in) :: eps
                            real(kind=4) dimension(:),intent(in) :: yscal
                            real(kind=4) intent(out) :: hdid
                            real(kind=4) intent(out) :: hnext
                            external derivs
                            interface  ! in :Umpy:nr.f90:nr:unknown_interface:odeint:unknown_interface:rkqs
                                subroutine derivs(x,y,dydx) ! in :Umpy:nr.f90:nr:unknown_interface:odeint:unknown_interface:rkqs:unknown_interface
                                    use nrtype
                                    real(kind=4) intent(in) :: x
                                    real(kind=4) dimension(:),intent(in) :: y
                                    real(kind=4) dimension(:),intent(out) :: dydx
                                end subroutine derivs
                            end interface 
                        end subroutine rkqs
                    end interface 
                end subroutine odeint
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine orthog(anu,alpha,beta,a,b) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: anu
                    real(kind=4) dimension(:),intent(in) :: alpha
                    real(kind=4) dimension(:),intent(in) :: beta
                    real(kind=4) dimension(:),intent(out) :: a
                    real(kind=4) dimension(:),intent(out) :: b
                end subroutine orthog
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine pade(cof,resid) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=8) dimension(:),intent(inout) :: cof
                    real(kind=4) intent(out) :: resid
                end subroutine pade
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function pccheb(d) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: d
                    real(kind=4) dimension(size(d)) :: pccheb
                end function pccheb
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine pcshft(a,b,d) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: a
                    real(kind=4) intent(in) :: b
                    real(kind=4) dimension(:),intent(inout) :: d
                end subroutine pcshft
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine pearsn(x,y,r,prob,z) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(:),intent(in) :: y
                    real(kind=4) intent(out) :: r
                    real(kind=4) intent(out) :: prob
                    real(kind=4) intent(out) :: z
                end subroutine pearsn
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine period(x,y,ofac,hifac,px,py,jmax,prob) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(:),intent(in) :: y
                    real(kind=4) intent(in) :: ofac
                    real(kind=4) intent(in) :: hifac
                    real(kind=4), pointer,dimension(:) :: px
                    real(kind=4), pointer,dimension(:) :: py
                    integer(kind=4) intent(out) :: jmax
                    real(kind=4) intent(out) :: prob
                end subroutine period
            end interface 
            interface plgndr ! in :Umpy:nr.f90:nr
                function plgndr_s(l,m,x) ! in :Umpy:nr.f90:nr:plgndr
                    use nrtype
                    integer(kind=4) intent(in) :: l
                    integer(kind=4) intent(in) :: m
                    real(kind=4) intent(in) :: x
                    real(kind=4) :: plgndr_s
                end function plgndr_s
                function plgndr_v(l,m,x) ! in :Umpy:nr.f90:nr:plgndr
                    use nrtype
                    integer(kind=4) intent(in) :: l
                    integer(kind=4) intent(in) :: m
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(size(x)) :: plgndr_v
                end function plgndr_v
            end interface plgndr
            interface  ! in :Umpy:nr.f90:nr
                function poidev(xm) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: xm
                    real(kind=4) :: poidev
                end function poidev
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function polcoe(x,y) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(:),intent(in) :: y
                    real(kind=4) dimension(size(x)) :: polcoe
                end function polcoe
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function polcof(xa,ya) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: xa
                    real(kind=4) dimension(:),intent(in) :: ya
                    real(kind=4) dimension(size(xa)) :: polcof
                end function polcof
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine poldiv(u,v,q,r) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: u
                    real(kind=4) dimension(:),intent(in) :: v
                    real(kind=4) dimension(:),intent(out) :: q
                    real(kind=4) dimension(:),intent(out) :: r
                end subroutine poldiv
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine polin2(x1a,x2a,ya,x1,x2,y,dy) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x1a
                    real(kind=4) dimension(:),intent(in) :: x2a
                    real(kind=4) dimension(:,:),intent(in) :: ya
                    real(kind=4) intent(in) :: x1
                    real(kind=4) intent(in) :: x2
                    real(kind=4) intent(out) :: y
                    real(kind=4) intent(out) :: dy
                end subroutine polin2
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine polint(xa,ya,x,y,dy) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: xa
                    real(kind=4) dimension(:),intent(in) :: ya
                    real(kind=4) intent(in) :: x
                    real(kind=4) intent(out) :: y
                    real(kind=4) intent(out) :: dy
                end subroutine polint
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine powell(p,xi,ftol,iter,fret) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: p
                    real(kind=4) dimension(:,:),intent(inout) :: xi
                    real(kind=4) intent(in) :: ftol
                    integer(kind=4) intent(out) :: iter
                    real(kind=4) intent(out) :: fret
                end subroutine powell
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function predic(data,d,nfut) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: data
                    real(kind=4) dimension(:),intent(in) :: d
                    integer(kind=4) intent(in) :: nfut
                    real(kind=4) dimension(nfut) :: predic
                end function predic
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function probks(alam) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: alam
                    real(kind=4) :: probks
                end function probks
            end interface 
            interface psdes ! in :Umpy:nr.f90:nr
                subroutine psdes_s(lword,rword) ! in :Umpy:nr.f90:nr:psdes
                    use nrtype
                    integer(kind=4) intent(inout) :: lword
                    integer(kind=4) intent(inout) :: rword
                end subroutine psdes_s
                subroutine psdes_v(lword,rword) ! in :Umpy:nr.f90:nr:psdes
                    use nrtype
                    integer(kind=4) dimension(:),intent(inout) :: lword
                    integer(kind=4) dimension(:),intent(inout) :: rword
                end subroutine psdes_v
            end interface psdes
            interface  ! in :Umpy:nr.f90:nr
                subroutine pwt(a,isign) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: a
                    integer(kind=4) intent(in) :: isign
                end subroutine pwt
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine pwtset(n) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    integer(kind=4) intent(in) :: n
                end subroutine pwtset
            end interface 
            interface pythag ! in :Umpy:nr.f90:nr
                function pythag_dp(a,b) ! in :Umpy:nr.f90:nr:pythag
                    use nrtype
                    real(kind=8) intent(in) :: a
                    real(kind=8) intent(in) :: b
                    real(kind=8) :: pythag_dp
                end function pythag_dp
                function pythag_sp(a,b) ! in :Umpy:nr.f90:nr:pythag
                    use nrtype
                    real(kind=4) intent(in) :: a
                    real(kind=4) intent(in) :: b
                    real(kind=4) :: pythag_sp
                end function pythag_sp
            end interface pythag
            interface  ! in :Umpy:nr.f90:nr
                subroutine pzextr(iest,xest,yest,yz,dy) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    integer(kind=4) intent(in) :: iest
                    real(kind=4) intent(in) :: xest
                    real(kind=4) dimension(:),intent(in) :: yest
                    real(kind=4) dimension(:),intent(out) :: yz
                    real(kind=4) dimension(:),intent(out) :: dy
                end subroutine pzextr
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine qrdcmp(a,c,d,sing) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:),intent(inout) :: a
                    real(kind=4) dimension(:),intent(out) :: c
                    real(kind=4) dimension(:),intent(out) :: d
                    logical(kind=kind(.true.)) intent(out) :: sing
                end subroutine qrdcmp
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function qromb(func,a,b) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    external func
                    real(kind=4) intent(in) :: a
                    real(kind=4) intent(in) :: b
                    real(kind=4) :: qromb
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:qromb
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:qromb:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: x
                            real(kind=4) dimension(size(x)) :: func
                        end function func
                    end interface 
                end function qromb
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function qromo(func,a,b,choose) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    external func
                    real(kind=4) intent(in) :: a
                    real(kind=4) intent(in) :: b
                    external choose
                    real(kind=4) :: qromo
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:qromo
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:qromo:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: x
                            real(kind=4) dimension(size(x)) :: func
                        end function func
                    end interface 
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:qromo
                        subroutine choose(funk,aa,bb,s,n) ! in :Umpy:nr.f90:nr:unknown_interface:qromo:unknown_interface
                            use nrtype
                            external funk
                            real(kind=4) intent(in) :: aa
                            real(kind=4) intent(in) :: bb
                            real(kind=4) intent(inout) :: s
                            integer(kind=4) intent(in) :: n
                            interface  ! in :Umpy:nr.f90:nr:unknown_interface:qromo:unknown_interface:choose
                                function funk(x) ! in :Umpy:nr.f90:nr:unknown_interface:qromo:unknown_interface:choose:unknown_interface
                                    use nrtype
                                    real(kind=4) dimension(:),intent(in) :: x
                                    real(kind=4) dimension(size(x)) :: funk
                                end function funk
                            end interface 
                        end subroutine choose
                    end interface 
                end function qromo
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine qroot(p,b,c,eps) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: p
                    real(kind=4) intent(inout) :: b
                    real(kind=4) intent(inout) :: c
                    real(kind=4) intent(in) :: eps
                end subroutine qroot
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine qrsolv(a,c,d,b) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:),intent(in) :: a
                    real(kind=4) dimension(:),intent(in) :: c
                    real(kind=4) dimension(:),intent(in) :: d
                    real(kind=4) dimension(:),intent(inout) :: b
                end subroutine qrsolv
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine qrupdt(r,qt,u,v) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:),intent(inout) :: r
                    real(kind=4) dimension(:,:),intent(inout) :: qt
                    real(kind=4) dimension(:),intent(inout) :: u
                    real(kind=4) dimension(:),intent(in) :: v
                end subroutine qrupdt
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function qsimp(func,a,b) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    external func
                    real(kind=4) intent(in) :: a
                    real(kind=4) intent(in) :: b
                    real(kind=4) :: qsimp
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:qsimp
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:qsimp:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: x
                            real(kind=4) dimension(size(x)) :: func
                        end function func
                    end interface 
                end function qsimp
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function qtrap(func,a,b) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    external func
                    real(kind=4) intent(in) :: a
                    real(kind=4) intent(in) :: b
                    real(kind=4) :: qtrap
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:qtrap
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:qtrap:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: x
                            real(kind=4) dimension(size(x)) :: func
                        end function func
                    end interface 
                end function qtrap
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine quadct(x,y,xx,yy,fa,fb,fc,fd) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: x
                    real(kind=4) intent(in) :: y
                    real(kind=4) dimension(:),intent(in) :: xx
                    real(kind=4) dimension(:),intent(in) :: yy
                    real(kind=4) intent(out) :: fa
                    real(kind=4) intent(out) :: fb
                    real(kind=4) intent(out) :: fc
                    real(kind=4) intent(out) :: fd
                end subroutine quadct
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine quadmx(a) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:),intent(out) :: a
                end subroutine quadmx
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine quadvl(x,y,fa,fb,fc,fd) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: x
                    real(kind=4) intent(in) :: y
                    real(kind=4) intent(out) :: fa
                    real(kind=4) intent(out) :: fb
                    real(kind=4) intent(out) :: fc
                    real(kind=4) intent(out) :: fd
                end subroutine quadvl
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function ran(idum) ! in :Umpy:nr.f90:nr:unknown_interface
                    integer(kind=selected_int_kind(9)) intent(inout) :: idum
                    real :: ran
                end function ran
            end interface 
            interface ran0 ! in :Umpy:nr.f90:nr
                subroutine ran0_s(harvest) ! in :Umpy:nr.f90:nr:ran0
                    use nrtype
                    real(kind=4) intent(out) :: harvest
                end subroutine ran0_s
                subroutine ran0_v(harvest) ! in :Umpy:nr.f90:nr:ran0
                    use nrtype
                    real(kind=4) dimension(:),intent(out) :: harvest
                end subroutine ran0_v
            end interface ran0
            interface ran1 ! in :Umpy:nr.f90:nr
                subroutine ran1_s(harvest) ! in :Umpy:nr.f90:nr:ran1
                    use nrtype
                    real(kind=4) intent(out) :: harvest
                end subroutine ran1_s
                subroutine ran1_v(harvest) ! in :Umpy:nr.f90:nr:ran1
                    use nrtype
                    real(kind=4) dimension(:),intent(out) :: harvest
                end subroutine ran1_v
            end interface ran1
            interface ran2 ! in :Umpy:nr.f90:nr
                subroutine ran2_s(harvest) ! in :Umpy:nr.f90:nr:ran2
                    use nrtype
                    real(kind=4) intent(out) :: harvest
                end subroutine ran2_s
                subroutine ran2_v(harvest) ! in :Umpy:nr.f90:nr:ran2
                    use nrtype
                    real(kind=4) dimension(:),intent(out) :: harvest
                end subroutine ran2_v
            end interface ran2
            interface ran3 ! in :Umpy:nr.f90:nr
                subroutine ran3_s(harvest) ! in :Umpy:nr.f90:nr:ran3
                    use nrtype
                    real(kind=4) intent(out) :: harvest
                end subroutine ran3_s
                subroutine ran3_v(harvest) ! in :Umpy:nr.f90:nr:ran3
                    use nrtype
                    real(kind=4) dimension(:),intent(out) :: harvest
                end subroutine ran3_v
            end interface ran3
            interface  ! in :Umpy:nr.f90:nr
                subroutine ratint(xa,ya,x,y,dy) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: xa
                    real(kind=4) dimension(:),intent(in) :: ya
                    real(kind=4) intent(in) :: x
                    real(kind=4) intent(out) :: y
                    real(kind=4) intent(out) :: dy
                end subroutine ratint
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine ratlsq(func,a,b,mm,kk,cof,dev) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    external func
                    real(kind=8) intent(in) :: a
                    real(kind=8) intent(in) :: b
                    integer(kind=4) intent(in) :: mm
                    integer(kind=4) intent(in) :: kk
                    real(kind=8) dimension(:),intent(out) :: cof
                    real(kind=8) intent(out) :: dev
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:ratlsq
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:ratlsq:unknown_interface
                            use nrtype
                            real(kind=8) dimension(:),intent(in) :: x
                            real(kind=8) dimension(size(x)) :: func
                        end function func
                    end interface 
                end subroutine ratlsq
            end interface 
            interface ratval ! in :Umpy:nr.f90:nr
                function ratval_s(x,cof,mm,kk) ! in :Umpy:nr.f90:nr:ratval
                    use nrtype
                    real(kind=8) intent(in) :: x
                    real(kind=8) dimension(mm+kk+1),intent(in),depend(mm,kk) :: cof
                    integer(kind=4) intent(in) :: mm
                    integer(kind=4) intent(in) :: kk
                    real(kind=8) :: ratval_s
                end function ratval_s
                function ratval_v(x,cof,mm,kk) ! in :Umpy:nr.f90:nr:ratval
                    use nrtype
                    real(kind=8) dimension(:),intent(in) :: x
                    real(kind=8) dimension(mm+kk+1),intent(in),depend(mm,kk) :: cof
                    integer(kind=4) intent(in) :: mm
                    integer(kind=4) intent(in) :: kk
                    real(kind=8) dimension(size(x)) :: ratval_v
                end function ratval_v
            end interface ratval
            interface rc ! in :Umpy:nr.f90:nr
                function rc_s(x,y) ! in :Umpy:nr.f90:nr:rc
                    use nrtype
                    real(kind=4) intent(in) :: x
                    real(kind=4) intent(in) :: y
                    real(kind=4) :: rc_s
                end function rc_s
                function rc_v(x,y) ! in :Umpy:nr.f90:nr:rc
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(:),intent(in) :: y
                    real(kind=4) dimension(size(x)) :: rc_v
                end function rc_v
            end interface rc
            interface rd ! in :Umpy:nr.f90:nr
                function rd_s(x,y,z) ! in :Umpy:nr.f90:nr:rd
                    use nrtype
                    real(kind=4) intent(in) :: x
                    real(kind=4) intent(in) :: y
                    real(kind=4) intent(in) :: z
                    real(kind=4) :: rd_s
                end function rd_s
                function rd_v(x,y,z) ! in :Umpy:nr.f90:nr:rd
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(:),intent(in) :: y
                    real(kind=4) dimension(:),intent(in) :: z
                    real(kind=4) dimension(size(x)) :: rd_v
                end function rd_v
            end interface rd
            interface realft ! in :Umpy:nr.f90:nr
                subroutine realft_dp(data,isign,zdata) ! in :Umpy:nr.f90:nr:realft
                    use nrtype
                    real(kind=8) dimension(:),intent(inout) :: data
                    integer(kind=4) intent(in) :: isign
                    complex(kind=kind((1.0d0,1.0d0))), target,optional,dimension(:) :: zdata
                end subroutine realft_dp
                subroutine realft_sp(data,isign,zdata) ! in :Umpy:nr.f90:nr:realft
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: data
                    integer(kind=4) intent(in) :: isign
                    complex(kind=kind((1.0,1.0))), target,optional,dimension(:) :: zdata
                end subroutine realft_sp
            end interface realft
            interface  ! in :Umpy:nr.f90:nr
                function recur1(a,b) result (u) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: a
                    real(kind=4) dimension(:),intent(in) :: b
                    real(kind=4) dimension(size(a)) :: u
                end function recur1
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function recur2(a,b,c) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: a
                    real(kind=4) dimension(:),intent(in) :: b
                    real(kind=4) dimension(:),intent(in) :: c
                    real(kind=4) dimension(size(a)) :: recur2
                end function recur2
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine relax(u,rhs) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=8) dimension(:,:),intent(inout) :: u
                    real(kind=8) dimension(:,:),intent(in) :: rhs
                end subroutine relax
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine relax2(u,rhs) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=8) dimension(:,:),intent(inout) :: u
                    real(kind=8) dimension(:,:),intent(in) :: rhs
                end subroutine relax2
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function resid(u,rhs) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=8) dimension(:,:),intent(in) :: u
                    real(kind=8) dimension(:,:),intent(in) :: rhs
                    real(kind=8) dimension(size(u,1),size(u,1)) :: resid
                end function resid
            end interface 
            interface rf ! in :Umpy:nr.f90:nr
                function rf_s(x,y,z) ! in :Umpy:nr.f90:nr:rf
                    use nrtype
                    real(kind=4) intent(in) :: x
                    real(kind=4) intent(in) :: y
                    real(kind=4) intent(in) :: z
                    real(kind=4) :: rf_s
                end function rf_s
                function rf_v(x,y,z) ! in :Umpy:nr.f90:nr:rf
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(:),intent(in) :: y
                    real(kind=4) dimension(:),intent(in) :: z
                    real(kind=4) dimension(size(x)) :: rf_v
                end function rf_v
            end interface rf
            interface rj ! in :Umpy:nr.f90:nr
                function rj_s(x,y,z,p) ! in :Umpy:nr.f90:nr:rj
                    use nrtype
                    real(kind=4) intent(in) :: x
                    real(kind=4) intent(in) :: y
                    real(kind=4) intent(in) :: z
                    real(kind=4) intent(in) :: p
                    real(kind=4) :: rj_s
                end function rj_s
                function rj_v(x,y,z,p) ! in :Umpy:nr.f90:nr:rj
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(:),intent(in) :: y
                    real(kind=4) dimension(:),intent(in) :: z
                    real(kind=4) dimension(:),intent(in) :: p
                    real(kind=4) dimension(size(x)) :: rj_v
                end function rj_v
            end interface rj
            interface  ! in :Umpy:nr.f90:nr
                subroutine rk4(y,dydx,x,h,yout,derivs) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: y
                    real(kind=4) dimension(:),intent(in) :: dydx
                    real(kind=4) intent(in) :: x
                    real(kind=4) intent(in) :: h
                    real(kind=4) dimension(:),intent(out) :: yout
                    external derivs
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:rk4
                        subroutine derivs(x,y,dydx) ! in :Umpy:nr.f90:nr:unknown_interface:rk4:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) dimension(:),intent(in) :: y
                            real(kind=4) dimension(:),intent(out) :: dydx
                        end subroutine derivs
                    end interface 
                end subroutine rk4
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine rkck(y,dydx,x,h,yout,yerr,derivs) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: y
                    real(kind=4) dimension(:),intent(in) :: dydx
                    real(kind=4) intent(in) :: x
                    real(kind=4) intent(in) :: h
                    real(kind=4) dimension(:),intent(out) :: yout
                    real(kind=4) dimension(:),intent(out) :: yerr
                    external derivs
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:rkck
                        subroutine derivs(x,y,dydx) ! in :Umpy:nr.f90:nr:unknown_interface:rkck:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) dimension(:),intent(in) :: y
                            real(kind=4) dimension(:),intent(out) :: dydx
                        end subroutine derivs
                    end interface 
                end subroutine rkck
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine rkdumb(vstart,x1,x2,nstep,derivs) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: vstart
                    real(kind=4) intent(in) :: x1
                    real(kind=4) intent(in) :: x2
                    integer(kind=4) intent(in) :: nstep
                    external derivs
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:rkdumb
                        subroutine derivs(x,y,dydx) ! in :Umpy:nr.f90:nr:unknown_interface:rkdumb:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) dimension(:),intent(in) :: y
                            real(kind=4) dimension(:),intent(out) :: dydx
                        end subroutine derivs
                    end interface 
                end subroutine rkdumb
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine rkqs(y,dydx,x,htry,eps,yscal,hdid,hnext,derivs) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: y
                    real(kind=4) dimension(:),intent(in) :: dydx
                    real(kind=4) intent(inout) :: x
                    real(kind=4) intent(in) :: htry
                    real(kind=4) intent(in) :: eps
                    real(kind=4) dimension(:),intent(in) :: yscal
                    real(kind=4) intent(out) :: hdid
                    real(kind=4) intent(out) :: hnext
                    external derivs
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:rkqs
                        subroutine derivs(x,y,dydx) ! in :Umpy:nr.f90:nr:unknown_interface:rkqs:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) dimension(:),intent(in) :: y
                            real(kind=4) dimension(:),intent(out) :: dydx
                        end subroutine derivs
                    end interface 
                end subroutine rkqs
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine rlft2(data,spec,speq,isign) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:),intent(inout) :: data
                    complex(kind=kind((1.0,1.0))) dimension(:,:),intent(out) :: spec
                    complex(kind=kind((1.0,1.0))) dimension(:),intent(out) :: speq
                    integer(kind=4) intent(in) :: isign
                end subroutine rlft2
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine rlft3(data,spec,speq,isign) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:,:),intent(inout) :: data
                    complex(kind=kind((1.0,1.0))) dimension(:,:,:),intent(out) :: spec
                    complex(kind=kind((1.0,1.0))) dimension(:,:),intent(out) :: speq
                    integer(kind=4) intent(in) :: isign
                end subroutine rlft3
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine rotate(r,qt,i,a,b) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4), target,dimension(:,:),intent(inout) :: r
                    real(kind=4), target,dimension(:,:),intent(inout) :: qt
                    integer(kind=4) intent(in) :: i
                    real(kind=4) intent(in) :: a
                    real(kind=4) intent(in) :: b
                end subroutine rotate
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine rsolv(a,d,b) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:),intent(in) :: a
                    real(kind=4) dimension(:),intent(in) :: d
                    real(kind=4) dimension(:),intent(inout) :: b
                end subroutine rsolv
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function rstrct(uf) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=8) dimension(:,:),intent(in) :: uf
                    real(kind=8) dimension((size(uf,1)+1)/2,(size(uf,1)+1)/2) :: rstrct
                end function rstrct
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function rtbis(func,x1,x2,xacc) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    external func
                    real(kind=4) intent(in) :: x1
                    real(kind=4) intent(in) :: x2
                    real(kind=4) intent(in) :: xacc
                    real(kind=4) :: rtbis
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:rtbis
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:rtbis:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) :: func
                        end function func
                    end interface 
                end function rtbis
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function rtflsp(func,x1,x2,xacc) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    external func
                    real(kind=4) intent(in) :: x1
                    real(kind=4) intent(in) :: x2
                    real(kind=4) intent(in) :: xacc
                    real(kind=4) :: rtflsp
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:rtflsp
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:rtflsp:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) :: func
                        end function func
                    end interface 
                end function rtflsp
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function rtnewt(funcd,x1,x2,xacc) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    external funcd
                    real(kind=4) intent(in) :: x1
                    real(kind=4) intent(in) :: x2
                    real(kind=4) intent(in) :: xacc
                    real(kind=4) :: rtnewt
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:rtnewt
                        subroutine funcd(x,fval,fderiv) ! in :Umpy:nr.f90:nr:unknown_interface:rtnewt:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) intent(out) :: fval
                            real(kind=4) intent(out) :: fderiv
                        end subroutine funcd
                    end interface 
                end function rtnewt
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function rtsafe(funcd,x1,x2,xacc) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    external funcd
                    real(kind=4) intent(in) :: x1
                    real(kind=4) intent(in) :: x2
                    real(kind=4) intent(in) :: xacc
                    real(kind=4) :: rtsafe
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:rtsafe
                        subroutine funcd(x,fval,fderiv) ! in :Umpy:nr.f90:nr:unknown_interface:rtsafe:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) intent(out) :: fval
                            real(kind=4) intent(out) :: fderiv
                        end subroutine funcd
                    end interface 
                end function rtsafe
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function rtsec(func,x1,x2,xacc) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    external func
                    real(kind=4) intent(in) :: x1
                    real(kind=4) intent(in) :: x2
                    real(kind=4) intent(in) :: xacc
                    real(kind=4) :: rtsec
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:rtsec
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:rtsec:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) :: func
                        end function func
                    end interface 
                end function rtsec
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine rzextr(iest,xest,yest,yz,dy) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    integer(kind=4) intent(in) :: iest
                    real(kind=4) intent(in) :: xest
                    real(kind=4) dimension(:),intent(in) :: yest
                    real(kind=4) dimension(:),intent(out) :: yz
                    real(kind=4) dimension(:),intent(out) :: dy
                end subroutine rzextr
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function savgol(nl,nrr,ld,m) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    integer(kind=4) intent(in) :: nl
                    integer(kind=4) intent(in) :: nrr
                    integer(kind=4) intent(in) :: ld
                    integer(kind=4) intent(in) :: m
                    real(kind=4) dimension(nl+nrr+1) :: savgol
                end function savgol
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine scrsho(func) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    external func
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:scrsho
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:scrsho:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) :: func
                        end function func
                    end interface 
                end subroutine scrsho
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function select(k,arr) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    integer(kind=4) intent(in) :: k
                    real(kind=4) dimension(:),intent(inout) :: arr
                    real(kind=4) :: select
                end function select
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function select_bypack(k,arr) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    integer(kind=4) intent(in) :: k
                    real(kind=4) dimension(:),intent(inout) :: arr
                    real(kind=4) :: select_bypack
                end function select_bypack
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine select_heap(arr,heap) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: arr
                    real(kind=4) dimension(:),intent(out) :: heap
                end subroutine select_heap
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function select_inplace(k,arr) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    integer(kind=4) intent(in) :: k
                    real(kind=4) dimension(:),intent(in) :: arr
                    real(kind=4) :: select_inplace
                end function select_inplace
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine simplx(a,m1,m2,m3,icase,izrov,iposv) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:),intent(inout) :: a
                    integer(kind=4) intent(in) :: m1
                    integer(kind=4) intent(in) :: m2
                    integer(kind=4) intent(in) :: m3
                    integer(kind=4) intent(out) :: icase
                    integer(kind=4) dimension(:),intent(out) :: izrov
                    integer(kind=4) dimension(:),intent(out) :: iposv
                end subroutine simplx
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine simpr(y,dydx,dfdx,dfdy,xs,htot,nstep,yout,derivs) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: y
                    real(kind=4) dimension(:),intent(in) :: dydx
                    real(kind=4) dimension(:),intent(in) :: dfdx
                    real(kind=4) dimension(:,:),intent(in) :: dfdy
                    real(kind=4) intent(in) :: xs
                    real(kind=4) intent(in) :: htot
                    integer(kind=4) intent(in) :: nstep
                    real(kind=4) dimension(:),intent(out) :: yout
                    external derivs
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:simpr
                        subroutine derivs(x,y,dydx) ! in :Umpy:nr.f90:nr:unknown_interface:simpr:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) dimension(:),intent(in) :: y
                            real(kind=4) dimension(:),intent(out) :: dydx
                        end subroutine derivs
                    end interface 
                end subroutine simpr
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine sinft(y) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: y
                end subroutine sinft
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine slvsm2(u,rhs) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=8) dimension(3,3),intent(out) :: u
                    real(kind=8) dimension(3,3),intent(in) :: rhs
                end subroutine slvsm2
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine slvsml(u,rhs) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=8) dimension(3,3),intent(out) :: u
                    real(kind=8) dimension(3,3),intent(in) :: rhs
                end subroutine slvsml
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine sncndn(uu,emmc,sn,cn,dn) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: uu
                    real(kind=4) intent(in) :: emmc
                    real(kind=4) intent(out) :: sn
                    real(kind=4) intent(out) :: cn
                    real(kind=4) intent(out) :: dn
                end subroutine sncndn
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function snrm(sx,itol) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=8) dimension(:),intent(in) :: sx
                    integer(kind=4) intent(in) :: itol
                    real(kind=8) :: snrm
                end function snrm
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine sobseq(x,init) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(out) :: x
                    integer(kind=4), optional,intent(in) :: init
                end subroutine sobseq
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine solvde(itmax,conv,slowc,scalv,indexv,nb,y) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    integer(kind=4) intent(in) :: itmax
                    real(kind=4) intent(in) :: conv
                    real(kind=4) intent(in) :: slowc
                    real(kind=4) dimension(:),intent(in) :: scalv
                    integer(kind=4) dimension(:),intent(in) :: indexv
                    integer(kind=4) intent(in) :: nb
                    real(kind=4) dimension(:,:),intent(inout) :: y
                end subroutine solvde
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine sor(a,b,c,d,e,f,u,rjac) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=8) dimension(:,:),intent(in) :: a
                    real(kind=8) dimension(:,:),intent(in) :: b
                    real(kind=8) dimension(:,:),intent(in) :: c
                    real(kind=8) dimension(:,:),intent(in) :: d
                    real(kind=8) dimension(:,:),intent(in) :: e
                    real(kind=8) dimension(:,:),intent(in) :: f
                    real(kind=8) dimension(:,:),intent(inout) :: u
                    real(kind=8) intent(in) :: rjac
                end subroutine sor
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine sort(arr) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: arr
                end subroutine sort
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine sort2(arr,slave) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: arr
                    real(kind=4) dimension(:),intent(inout) :: slave
                end subroutine sort2
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine sort3(arr,slave1,slave2) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: arr
                    real(kind=4) dimension(:),intent(inout) :: slave1
                    real(kind=4) dimension(:),intent(inout) :: slave2
                end subroutine sort3
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine sort_bypack(arr) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: arr
                end subroutine sort_bypack
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine sort_byreshape(arr) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: arr
                end subroutine sort_byreshape
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine sort_heap(arr) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: arr
                end subroutine sort_heap
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine sort_pick(arr) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: arr
                end subroutine sort_pick
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine sort_radix(arr) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: arr
                end subroutine sort_radix
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine sort_shell(arr) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: arr
                end subroutine sort_shell
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine spctrm(p,k,ovrlap,unit,n_window) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(out) :: p
                    integer(kind=4) intent(in) :: k
                    logical(kind=kind(.true.)) intent(in) :: ovrlap
                    integer(kind=4), optional,intent(in) :: unit
                    integer(kind=4), optional,intent(in) :: n_window
                end subroutine spctrm
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine spear(data1,data2,d,zd,probd,rs,probrs) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: data1
                    real(kind=4) dimension(:),intent(in) :: data2
                    real(kind=4) intent(out) :: d
                    real(kind=4) intent(out) :: zd
                    real(kind=4) intent(out) :: probd
                    real(kind=4) intent(out) :: rs
                    real(kind=4) intent(out) :: probrs
                end subroutine spear
            end interface 
            interface sphbes ! in :Umpy:nr.f90:nr
                subroutine sphbes_s(n,x,sj,sy,sjp,syp) ! in :Umpy:nr.f90:nr:sphbes
                    use nrtype
                    integer(kind=4) intent(in) :: n
                    real(kind=4) intent(in) :: x
                    real(kind=4) intent(out) :: sj
                    real(kind=4) intent(out) :: sy
                    real(kind=4) intent(out) :: sjp
                    real(kind=4) intent(out) :: syp
                end subroutine sphbes_s
                subroutine sphbes_v(n,x,sj,sy,sjp,syp) ! in :Umpy:nr.f90:nr:sphbes
                    use nrtype
                    integer(kind=4) intent(in) :: n
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(:),intent(out) :: sj
                    real(kind=4) dimension(:),intent(out) :: sy
                    real(kind=4) dimension(:),intent(out) :: sjp
                    real(kind=4) dimension(:),intent(out) :: syp
                end subroutine sphbes_v
            end interface sphbes
            interface  ! in :Umpy:nr.f90:nr
                subroutine splie2(x1a,x2a,ya,y2a) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x1a
                    real(kind=4) dimension(:),intent(in) :: x2a
                    real(kind=4) dimension(:,:),intent(in) :: ya
                    real(kind=4) dimension(:,:),intent(out) :: y2a
                end subroutine splie2
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function splin2(x1a,x2a,ya,y2a,x1,x2) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x1a
                    real(kind=4) dimension(:),intent(in) :: x2a
                    real(kind=4) dimension(:,:),intent(in) :: ya
                    real(kind=4) dimension(:,:),intent(in) :: y2a
                    real(kind=4) intent(in) :: x1
                    real(kind=4) intent(in) :: x2
                    real(kind=4) :: splin2
                end function splin2
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine spline(x,y,yp1,ypn,y2) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(:),intent(in) :: y
                    real(kind=4) intent(in) :: yp1
                    real(kind=4) intent(in) :: ypn
                    real(kind=4) dimension(:),intent(out) :: y2
                end subroutine spline
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function splint(xa,ya,y2a,x) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: xa
                    real(kind=4) dimension(:),intent(in) :: ya
                    real(kind=4) dimension(:),intent(in) :: y2a
                    real(kind=4) intent(in) :: x
                    real(kind=4) :: splint
                end function splint
            end interface 
            interface sprsax ! in :Umpy:nr.f90:nr
                subroutine sprsax_dp(sa,x,b) ! in :Umpy:nr.f90:nr:sprsax
                    use nrtype
                    type(sprs2_dp) intent(in) :: sa
                    real(kind=8) dimension(:),intent(in) :: x
                    real(kind=8) dimension(:),intent(out) :: b
                end subroutine sprsax_dp
                subroutine sprsax_sp(sa,x,b) ! in :Umpy:nr.f90:nr:sprsax
                    use nrtype
                    type(sprs2_sp) intent(in) :: sa
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(:),intent(out) :: b
                end subroutine sprsax_sp
            end interface sprsax
            interface sprsdiag ! in :Umpy:nr.f90:nr
                subroutine sprsdiag_dp(sa,b) ! in :Umpy:nr.f90:nr:sprsdiag
                    use nrtype
                    type(sprs2_dp) intent(in) :: sa
                    real(kind=8) dimension(:),intent(out) :: b
                end subroutine sprsdiag_dp
                subroutine sprsdiag_sp(sa,b) ! in :Umpy:nr.f90:nr:sprsdiag
                    use nrtype
                    type(sprs2_sp) intent(in) :: sa
                    real(kind=4) dimension(:),intent(out) :: b
                end subroutine sprsdiag_sp
            end interface sprsdiag
            interface sprsin ! in :Umpy:nr.f90:nr
                subroutine sprsin_sp(a,thresh,sa) ! in :Umpy:nr.f90:nr:sprsin
                    use nrtype
                    real(kind=4) dimension(:,:),intent(in) :: a
                    real(kind=4) intent(in) :: thresh
                    type(sprs2_sp) intent(out) :: sa
                end subroutine sprsin_sp
                subroutine sprsin_dp(a,thresh,sa) ! in :Umpy:nr.f90:nr:sprsin
                    use nrtype
                    real(kind=8) dimension(:,:),intent(in) :: a
                    real(kind=8) intent(in) :: thresh
                    type(sprs2_dp) intent(out) :: sa
                end subroutine sprsin_dp
            end interface sprsin
            interface  ! in :Umpy:nr.f90:nr
                subroutine sprstp(sa) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    type(sprs2_sp) intent(inout) :: sa
                end subroutine sprstp
            end interface 
            interface sprstx ! in :Umpy:nr.f90:nr
                subroutine sprstx_dp(sa,x,b) ! in :Umpy:nr.f90:nr:sprstx
                    use nrtype
                    type(sprs2_dp) intent(in) :: sa
                    real(kind=8) dimension(:),intent(in) :: x
                    real(kind=8) dimension(:),intent(out) :: b
                end subroutine sprstx_dp
                subroutine sprstx_sp(sa,x,b) ! in :Umpy:nr.f90:nr:sprstx
                    use nrtype
                    type(sprs2_sp) intent(in) :: sa
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(:),intent(out) :: b
                end subroutine sprstx_sp
            end interface sprstx
            interface  ! in :Umpy:nr.f90:nr
                subroutine stifbs(y,dydx,x,htry,eps,yscal,hdid,hnext,derivs) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: y
                    real(kind=4) dimension(:),intent(in) :: dydx
                    real(kind=4) intent(inout) :: x
                    real(kind=4) intent(in) :: htry
                    real(kind=4) intent(in) :: eps
                    real(kind=4) dimension(:),intent(in) :: yscal
                    real(kind=4) intent(out) :: hdid
                    real(kind=4) intent(out) :: hnext
                    external derivs
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:stifbs
                        subroutine derivs(x,y,dydx) ! in :Umpy:nr.f90:nr:unknown_interface:stifbs:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) dimension(:),intent(in) :: y
                            real(kind=4) dimension(:),intent(out) :: dydx
                        end subroutine derivs
                    end interface 
                end subroutine stifbs
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine stiff(y,dydx,x,htry,eps,yscal,hdid,hnext,derivs) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: y
                    real(kind=4) dimension(:),intent(in) :: dydx
                    real(kind=4) intent(inout) :: x
                    real(kind=4) intent(in) :: htry
                    real(kind=4) intent(in) :: eps
                    real(kind=4) dimension(:),intent(in) :: yscal
                    real(kind=4) intent(out) :: hdid
                    real(kind=4) intent(out) :: hnext
                    external derivs
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:stiff
                        subroutine derivs(x,y,dydx) ! in :Umpy:nr.f90:nr:unknown_interface:stiff:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) dimension(:),intent(in) :: y
                            real(kind=4) dimension(:),intent(out) :: dydx
                        end subroutine derivs
                    end interface 
                end subroutine stiff
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine stoerm(y,d2y,xs,htot,nstep,yout,derivs) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: y
                    real(kind=4) dimension(:),intent(in) :: d2y
                    real(kind=4) intent(in) :: xs
                    real(kind=4) intent(in) :: htot
                    integer(kind=4) intent(in) :: nstep
                    real(kind=4) dimension(:),intent(out) :: yout
                    external derivs
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:stoerm
                        subroutine derivs(x,y,dydx) ! in :Umpy:nr.f90:nr:unknown_interface:stoerm:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) dimension(:),intent(in) :: y
                            real(kind=4) dimension(:),intent(out) :: dydx
                        end subroutine derivs
                    end interface 
                end subroutine stoerm
            end interface 
            interface svbksb ! in :Umpy:nr.f90:nr
                subroutine svbksb_dp(u,w,v,b,x) ! in :Umpy:nr.f90:nr:svbksb
                    use nrtype
                    real(kind=8) dimension(:,:),intent(in) :: u
                    real(kind=8) dimension(:),intent(in) :: w
                    real(kind=8) dimension(:,:),intent(in) :: v
                    real(kind=8) dimension(:),intent(in) :: b
                    real(kind=8) dimension(:),intent(out) :: x
                end subroutine svbksb_dp
                subroutine svbksb_sp(u,w,v,b,x) ! in :Umpy:nr.f90:nr:svbksb
                    use nrtype
                    real(kind=4) dimension(:,:),intent(in) :: u
                    real(kind=4) dimension(:),intent(in) :: w
                    real(kind=4) dimension(:,:),intent(in) :: v
                    real(kind=4) dimension(:),intent(in) :: b
                    real(kind=4) dimension(:),intent(out) :: x
                end subroutine svbksb_sp
            end interface svbksb
            interface svdcmp ! in :Umpy:nr.f90:nr
                subroutine svdcmp_dp(a,w,v) ! in :Umpy:nr.f90:nr:svdcmp
                    use nrtype
                    real(kind=8) dimension(:,:),intent(inout) :: a
                    real(kind=8) dimension(:),intent(out) :: w
                    real(kind=8) dimension(:,:),intent(out) :: v
                end subroutine svdcmp_dp
                subroutine svdcmp_sp(a,w,v) ! in :Umpy:nr.f90:nr:svdcmp
                    use nrtype
                    real(kind=4) dimension(:,:),intent(inout) :: a
                    real(kind=4) dimension(:),intent(out) :: w
                    real(kind=4) dimension(:,:),intent(out) :: v
                end subroutine svdcmp_sp
            end interface svdcmp
            interface  ! in :Umpy:nr.f90:nr
                subroutine svdfit(x,y,sig,a,v,w,chisq,funcs) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: x
                    real(kind=4) dimension(:),intent(in) :: y
                    real(kind=4) dimension(:),intent(in) :: sig
                    real(kind=4) dimension(:),intent(out) :: a
                    real(kind=4) dimension(:,:),intent(out) :: v
                    real(kind=4) dimension(:),intent(out) :: w
                    real(kind=4) intent(out) :: chisq
                    external funcs
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:svdfit
                        function funcs(x,n) ! in :Umpy:nr.f90:nr:unknown_interface:svdfit:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            integer(kind=4) intent(in) :: n
                            real(kind=4) dimension(n) :: funcs
                        end function funcs
                    end interface 
                end subroutine svdfit
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine svdvar(v,w,cvm) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:),intent(in) :: v
                    real(kind=4) dimension(:),intent(in) :: w
                    real(kind=4) dimension(:,:),intent(out) :: cvm
                end subroutine svdvar
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function toeplz(r,y) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: r
                    real(kind=4) dimension(:),intent(in) :: y
                    real(kind=4) dimension(size(y)) :: toeplz
                end function toeplz
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine tptest(data1,data2,t,prob) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: data1
                    real(kind=4) dimension(:),intent(in) :: data2
                    real(kind=4) intent(out) :: t
                    real(kind=4) intent(out) :: prob
                end subroutine tptest
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine tqli(d,e,z) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: d
                    real(kind=4) dimension(:),intent(inout) :: e
                    real(kind=4), optional,dimension(:,:),intent(inout) :: z
                end subroutine tqli
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine trapzd(func,a,b,s,n) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    external func
                    real(kind=4) intent(in) :: a
                    real(kind=4) intent(in) :: b
                    real(kind=4) intent(inout) :: s
                    integer(kind=4) intent(in) :: n
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:trapzd
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:trapzd:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: x
                            real(kind=4) dimension(size(x)) :: func
                        end function func
                    end interface 
                end subroutine trapzd
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine tred2(a,d,e,novectors) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:,:),intent(inout) :: a
                    real(kind=4) dimension(:),intent(out) :: d
                    real(kind=4) dimension(:),intent(out) :: e
                    logical(kind=kind(.true.)), optional,intent(in) :: novectors
                end subroutine tred2
            end interface 
            interface tridag ! in :Umpy:nr.f90:nr
                subroutine tridag_par(a,b,c,r,u) ! in :Umpy:nr.f90:nr:tridag
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: a
                    real(kind=4) dimension(:),intent(in) :: b
                    real(kind=4) dimension(:),intent(in) :: c
                    real(kind=4) dimension(:),intent(in) :: r
                    real(kind=4) dimension(:),intent(out) :: u
                end subroutine tridag_par
            end interface tridag
            interface  ! in :Umpy:nr.f90:nr
                subroutine tridag_ser(a,b,c,r,u) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: a
                    real(kind=4) dimension(:),intent(in) :: b
                    real(kind=4) dimension(:),intent(in) :: c
                    real(kind=4) dimension(:),intent(in) :: r
                    real(kind=4) dimension(:),intent(out) :: u
                end subroutine tridag_ser
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine ttest(data1,data2,t,prob) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: data1
                    real(kind=4) dimension(:),intent(in) :: data2
                    real(kind=4) intent(out) :: t
                    real(kind=4) intent(out) :: prob
                end subroutine ttest
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine tutest(data1,data2,t,prob) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: data1
                    real(kind=4) dimension(:),intent(in) :: data2
                    real(kind=4) intent(out) :: t
                    real(kind=4) intent(out) :: prob
                end subroutine tutest
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine twofft(data1,data2,fft1,fft2) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: data1
                    real(kind=4) dimension(:),intent(in) :: data2
                    complex(kind=kind((1.0,1.0))) dimension(:),intent(out) :: fft1
                    complex(kind=kind((1.0,1.0))) dimension(:),intent(out) :: fft2
                end subroutine twofft
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function vander(x,q) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=8) dimension(:),intent(in) :: x
                    real(kind=8) dimension(:),intent(in) :: q
                    real(kind=8) dimension(size(x)) :: vander
                end function vander
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine vegas(region,func,init,ncall,itmx,nprn,tgral,sd,chi2a) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: region
                    external func
                    integer(kind=4) intent(in) :: init
                    integer(kind=4) intent(in) :: ncall
                    integer(kind=4) intent(in) :: itmx
                    integer(kind=4) intent(in) :: nprn
                    real(kind=4) intent(out) :: tgral
                    real(kind=4) intent(out) :: sd
                    real(kind=4) intent(out) :: chi2a
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:vegas
                        function func(pt,wgt) ! in :Umpy:nr.f90:nr:unknown_interface:vegas:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(in) :: pt
                            real(kind=4) intent(in) :: wgt
                            real(kind=4) :: func
                        end function func
                    end interface 
                end subroutine vegas
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine voltra(t0,h,t,f,g,ak) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) intent(in) :: t0
                    real(kind=4) intent(in) :: h
                    real(kind=4) dimension(:),intent(out) :: t
                    real(kind=4) dimension(:,:),intent(out) :: f
                    external g
                    external ak
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:voltra
                        function g(t) ! in :Umpy:nr.f90:nr:unknown_interface:voltra:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: t
                            real(kind=4), pointer,dimension(:) :: g
                        end function g
                        function ak(t,s) ! in :Umpy:nr.f90:nr:unknown_interface:voltra:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: t
                            real(kind=4) intent(in) :: s
                            real(kind=4), pointer,dimension(:,:) :: ak
                        end function ak
                    end interface 
                end subroutine voltra
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine wt1(a,isign,wtstep) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: a
                    integer(kind=4) intent(in) :: isign
                    external wtstep
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:wt1
                        subroutine wtstep(a,isign) ! in :Umpy:nr.f90:nr:unknown_interface:wt1:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(inout) :: a
                            integer(kind=4) intent(in) :: isign
                        end subroutine wtstep
                    end interface 
                end subroutine wt1
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine wtn(a,nn,isign,wtstep) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(inout) :: a
                    integer(kind=4) dimension(:),intent(in) :: nn
                    integer(kind=4) intent(in) :: isign
                    external wtstep
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:wtn
                        subroutine wtstep(a,isign) ! in :Umpy:nr.f90:nr:unknown_interface:wtn:unknown_interface
                            use nrtype
                            real(kind=4) dimension(:),intent(inout) :: a
                            integer(kind=4) intent(in) :: isign
                        end subroutine wtstep
                    end interface 
                end subroutine wtn
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function wwghts(n,h,kermom) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    integer(kind=4) intent(in) :: n
                    real(kind=4) intent(in) :: h
                    external kermom
                    real(kind=4) dimension(n) :: wwghts
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:wwghts
                        function kermom(y,m) ! in :Umpy:nr.f90:nr:unknown_interface:wwghts:unknown_interface
                            use nrtype
                            real(kind=8) intent(in) :: y
                            integer(kind=4) intent(in) :: m
                            real(kind=8) dimension(m) :: kermom
                        end function kermom
                    end interface 
                end function wwghts
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine zbrac(func,x1,x2,succes) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    external func
                    real(kind=4) intent(inout) :: x1
                    real(kind=4) intent(inout) :: x2
                    logical(kind=kind(.true.)) intent(out) :: succes
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:zbrac
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:zbrac:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) :: func
                        end function func
                    end interface 
                end subroutine zbrac
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine zbrak(func,x1,x2,n,xb1,xb2,nb) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    external func
                    real(kind=4) intent(in) :: x1
                    real(kind=4) intent(in) :: x2
                    integer(kind=4) intent(in) :: n
                    real(kind=4), pointer,dimension(:) :: xb1
                    real(kind=4), pointer,dimension(:) :: xb2
                    integer(kind=4) intent(out) :: nb
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:zbrak
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:zbrak:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) :: func
                        end function func
                    end interface 
                end subroutine zbrak
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function zbrent(func,x1,x2,tol) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    external func
                    real(kind=4) intent(in) :: x1
                    real(kind=4) intent(in) :: x2
                    real(kind=4) intent(in) :: tol
                    real(kind=4) :: zbrent
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:zbrent
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:zbrent:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) :: func
                        end function func
                    end interface 
                end function zbrent
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine zrhqr(a,rtr,rti) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    real(kind=4) dimension(:),intent(in) :: a
                    real(kind=4) dimension(:),intent(out) :: rtr
                    real(kind=4) dimension(:),intent(out) :: rti
                end subroutine zrhqr
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                function zriddr(func,x1,x2,xacc) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    external func
                    real(kind=4) intent(in) :: x1
                    real(kind=4) intent(in) :: x2
                    real(kind=4) intent(in) :: xacc
                    real(kind=4) :: zriddr
                    interface  ! in :Umpy:nr.f90:nr:unknown_interface:zriddr
                        function func(x) ! in :Umpy:nr.f90:nr:unknown_interface:zriddr:unknown_interface
                            use nrtype
                            real(kind=4) intent(in) :: x
                            real(kind=4) :: func
                        end function func
                    end interface 
                end function zriddr
            end interface 
            interface  ! in :Umpy:nr.f90:nr
                subroutine zroots(a,roots,polish) ! in :Umpy:nr.f90:nr:unknown_interface
                    use nrtype
                    complex(kind=kind((1.0,1.0))) dimension(:),intent(in) :: a
                    complex(kind=kind((1.0,1.0))) dimension(:),intent(out) :: roots
                    logical(kind=kind(.true.)) intent(in) :: polish
                end subroutine zroots
            end interface 
        end module nr
        module nrutil ! in :Umpy:nrutil.f90
            use nrtype
            integer(kind=4), parameter,optional :: npar_cumprod=8
            integer(kind=4), parameter,optional :: npar_geop=4
            integer(kind=4), parameter,optional :: npar_polyterm=8
            integer(kind=4), parameter,optional :: npar2_arth=8
            integer(kind=4), parameter,optional :: npar_arth=16
            integer(kind=4), parameter,optional :: npar_cumsum=16
            integer(kind=4), parameter,optional :: npar2_geop=2
            integer(kind=4), parameter,optional :: npar_poly=8
            subroutine array_copy_r(src,dest,n_copied,n_not_copied) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) dimension(:),intent(in) :: src
                real(kind=4) dimension(:),intent(out) :: dest
                integer(kind=4) intent(out) :: n_copied
                integer(kind=4) intent(out) :: n_not_copied
            end subroutine array_copy_r
            subroutine array_copy_d(src,dest,n_copied,n_not_copied) ! in :Umpy:nrutil.f90:nrutil
                real(kind=8) dimension(:),intent(in) :: src
                real(kind=8) dimension(:),intent(out) :: dest
                integer(kind=4) intent(out) :: n_copied
                integer(kind=4) intent(out) :: n_not_copied
            end subroutine array_copy_d
            subroutine array_copy_i(src,dest,n_copied,n_not_copied) ! in :Umpy:nrutil.f90:nrutil
                integer(kind=4) dimension(:),intent(in) :: src
                integer(kind=4) dimension(:),intent(out) :: dest
                integer(kind=4) intent(out) :: n_copied
                integer(kind=4) intent(out) :: n_not_copied
            end subroutine array_copy_i
            subroutine swap_i(a,b) ! in :Umpy:nrutil.f90:nrutil
                integer(kind=4) intent(inout) :: a
                integer(kind=4) intent(inout) :: b
            end subroutine swap_i
            subroutine swap_r(a,b) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) intent(inout) :: a
                real(kind=4) intent(inout) :: b
            end subroutine swap_r
            subroutine swap_rv(a,b) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) dimension(:),intent(inout) :: a
                real(kind=4) dimension(:),intent(inout) :: b
            end subroutine swap_rv
            subroutine swap_c(a,b) ! in :Umpy:nrutil.f90:nrutil
                complex(kind=kind((1.0,1.0))) intent(inout) :: a
                complex(kind=kind((1.0,1.0))) intent(inout) :: b
            end subroutine swap_c
            subroutine swap_cv(a,b) ! in :Umpy:nrutil.f90:nrutil
                complex(kind=kind((1.0,1.0))) dimension(:),intent(inout) :: a
                complex(kind=kind((1.0,1.0))) dimension(:),intent(inout) :: b
            end subroutine swap_cv
            subroutine swap_cm(a,b) ! in :Umpy:nrutil.f90:nrutil
                complex(kind=kind((1.0,1.0))) dimension(:,:),intent(inout) :: a
                complex(kind=kind((1.0,1.0))) dimension(:,:),intent(inout) :: b
            end subroutine swap_cm
            subroutine swap_z(a,b) ! in :Umpy:nrutil.f90:nrutil
                complex(kind=kind((1.0d0,1.0d0))) intent(inout) :: a
                complex(kind=kind((1.0d0,1.0d0))) intent(inout) :: b
            end subroutine swap_z
            subroutine swap_zv(a,b) ! in :Umpy:nrutil.f90:nrutil
                complex(kind=kind((1.0d0,1.0d0))) dimension(:),intent(inout) :: a
                complex(kind=kind((1.0d0,1.0d0))) dimension(:),intent(inout) :: b
            end subroutine swap_zv
            subroutine swap_zm(a,b) ! in :Umpy:nrutil.f90:nrutil
                complex(kind=kind((1.0d0,1.0d0))) dimension(:,:),intent(inout) :: a
                complex(kind=kind((1.0d0,1.0d0))) dimension(:,:),intent(inout) :: b
            end subroutine swap_zm
            subroutine masked_swap_rs(a,b,mask) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) intent(inout) :: a
                real(kind=4) intent(inout) :: b
                logical(kind=kind(.true.)) intent(in) :: mask
            end subroutine masked_swap_rs
            subroutine masked_swap_rv(a,b,mask) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) dimension(:),intent(inout) :: a
                real(kind=4) dimension(:),intent(inout) :: b
                logical(kind=kind(.true.)) dimension(:),intent(in) :: mask
            end subroutine masked_swap_rv
            subroutine masked_swap_rm(a,b,mask) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) dimension(:,:),intent(inout) :: a
                real(kind=4) dimension(:,:),intent(inout) :: b
                logical(kind=kind(.true.)) dimension(:,:),intent(in) :: mask
            end subroutine masked_swap_rm
            function reallocate_rv(p,n) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4), pointer,dimension(:) :: p
                integer(kind=4) intent(in) :: n
                real(kind=4), pointer,dimension(:) :: reallocate_rv
            end function reallocate_rv
            function reallocate_iv(p,n) ! in :Umpy:nrutil.f90:nrutil
                integer(kind=4), pointer,dimension(:) :: p
                integer(kind=4) intent(in) :: n
                integer(kind=4), pointer,dimension(:) :: reallocate_iv
            end function reallocate_iv
            function reallocate_hv(p,n) ! in :Umpy:nrutil.f90:nrutil
                character(len=1), pointer,dimension(:) :: p
                integer(kind=4) intent(in) :: n
                character(len=1), pointer,dimension(:) :: reallocate_hv
            end function reallocate_hv
            function reallocate_rm(p,n,m) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4), pointer,dimension(:,:) :: p
                integer(kind=4) intent(in) :: n
                integer(kind=4) intent(in) :: m
                real(kind=4), pointer,dimension(:,:) :: reallocate_rm
            end function reallocate_rm
            function reallocate_im(p,n,m) ! in :Umpy:nrutil.f90:nrutil
                integer(kind=4), pointer,dimension(:,:) :: p
                integer(kind=4) intent(in) :: n
                integer(kind=4) intent(in) :: m
                integer(kind=4), pointer,dimension(:,:) :: reallocate_im
            end function reallocate_im
            function ifirstloc(mask) ! in :Umpy:nrutil.f90:nrutil
                logical(kind=kind(.true.)) dimension(:),intent(in) :: mask
                integer(kind=4) :: ifirstloc
            end function ifirstloc
            function imaxloc_r(arr) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) dimension(:),intent(in) :: arr
                integer(kind=4) :: imaxloc_r
            end function imaxloc_r
            function imaxloc_i(iarr) ! in :Umpy:nrutil.f90:nrutil
                integer(kind=4) dimension(:),intent(in) :: iarr
                integer(kind=4) :: imaxloc_i
            end function imaxloc_i
            function iminloc(arr) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) dimension(:),intent(in) :: arr
                integer(kind=4) :: iminloc
            end function iminloc
            subroutine assert1(n1,string_bn) ! in :Umpy:nrutil.f90:nrutil
                logical intent(in) :: n1
                character*(*) intent(in) :: string_bn
            end subroutine assert1
            subroutine assert2(n1,n2,string_bn) ! in :Umpy:nrutil.f90:nrutil
                logical intent(in) :: n1
                logical intent(in) :: n2
                character*(*) intent(in) :: string_bn
            end subroutine assert2
            subroutine assert3(n1,n2,n3,string_bn) ! in :Umpy:nrutil.f90:nrutil
                logical intent(in) :: n1
                logical intent(in) :: n2
                logical intent(in) :: n3
                character*(*) intent(in) :: string_bn
            end subroutine assert3
            subroutine assert4(n1,n2,n3,n4,string_bn) ! in :Umpy:nrutil.f90:nrutil
                logical intent(in) :: n1
                logical intent(in) :: n2
                logical intent(in) :: n3
                logical intent(in) :: n4
                character*(*) intent(in) :: string_bn
            end subroutine assert4
            subroutine assert_v(n,string_bn) ! in :Umpy:nrutil.f90:nrutil
                logical dimension(:),intent(in) :: n
                character*(*) intent(in) :: string_bn
            end subroutine assert_v
            function assert_eq2(n1,n2,string_bn) ! in :Umpy:nrutil.f90:nrutil
                integer intent(in) :: n1
                integer intent(in) :: n2
                character*(*) intent(in) :: string_bn
                integer :: assert_eq2
            end function assert_eq2
            function assert_eq3(n1,n2,n3,string_bn) ! in :Umpy:nrutil.f90:nrutil
                integer intent(in) :: n1
                integer intent(in) :: n2
                integer intent(in) :: n3
                character*(*) intent(in) :: string_bn
                integer :: assert_eq3
            end function assert_eq3
            function assert_eq4(n1,n2,n3,n4,string_bn) ! in :Umpy:nrutil.f90:nrutil
                integer intent(in) :: n1
                integer intent(in) :: n2
                integer intent(in) :: n3
                integer intent(in) :: n4
                character*(*) intent(in) :: string_bn
                integer :: assert_eq4
            end function assert_eq4
            function assert_eqn(nn,string_bn) ! in :Umpy:nrutil.f90:nrutil
                integer dimension(:),intent(in) :: nn
                character*(*) intent(in) :: string_bn
                integer :: assert_eqn
            end function assert_eqn
            subroutine nrerror(string_bn) ! in :Umpy:nrutil.f90:nrutil
                character*(*) intent(in) :: string_bn
            end subroutine nrerror
            function arth_r(first,increment,n) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) intent(in) :: first
                real(kind=4) intent(in) :: increment
                integer(kind=4) intent(in) :: n
                real(kind=4) dimension(n) :: arth_r
            end function arth_r
            function arth_d(first,increment,n) ! in :Umpy:nrutil.f90:nrutil
                real(kind=8) intent(in) :: first
                real(kind=8) intent(in) :: increment
                integer(kind=4) intent(in) :: n
                real(kind=8) dimension(n) :: arth_d
            end function arth_d
            function arth_i(first,increment,n) ! in :Umpy:nrutil.f90:nrutil
                integer(kind=4) intent(in) :: first
                integer(kind=4) intent(in) :: increment
                integer(kind=4) intent(in) :: n
                integer(kind=4) dimension(n) :: arth_i
            end function arth_i
            function geop_r(first,factor,n) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) intent(in) :: first
                real(kind=4) intent(in) :: factor
                integer(kind=4) intent(in) :: n
                real(kind=4) dimension(n) :: geop_r
            end function geop_r
            function geop_d(first,factor,n) ! in :Umpy:nrutil.f90:nrutil
                real(kind=8) intent(in) :: first
                real(kind=8) intent(in) :: factor
                integer(kind=4) intent(in) :: n
                real(kind=8) dimension(n) :: geop_d
            end function geop_d
            function geop_i(first,factor,n) ! in :Umpy:nrutil.f90:nrutil
                integer(kind=4) intent(in) :: first
                integer(kind=4) intent(in) :: factor
                integer(kind=4) intent(in) :: n
                integer(kind=4) dimension(n) :: geop_i
            end function geop_i
            function geop_c(first,factor,n) ! in :Umpy:nrutil.f90:nrutil
                complex(kind=4) intent(in) :: first
                complex(kind=4) intent(in) :: factor
                integer(kind=4) intent(in) :: n
                complex(kind=4) dimension(n) :: geop_c
            end function geop_c
            function geop_dv(first,factor,n) ! in :Umpy:nrutil.f90:nrutil
                real(kind=8) dimension(:),intent(in) :: first
                real(kind=8) dimension(:),intent(in) :: factor
                integer(kind=4) intent(in) :: n
                real(kind=8) dimension(size(first),n) :: geop_dv
            end function geop_dv
            function cumsum_r(arr,seed) result (ans) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) dimension(:),intent(in) :: arr
                real(kind=4), optional,intent(in) :: seed
                real(kind=4) dimension(size(arr)) :: ans
            end function cumsum_r
            function cumsum_i(arr,seed) result (ans) ! in :Umpy:nrutil.f90:nrutil
                integer(kind=4) dimension(:),intent(in) :: arr
                integer(kind=4), optional,intent(in) :: seed
                integer(kind=4) dimension(size(arr)) :: ans
            end function cumsum_i
            function cumprod(arr,seed) result (ans) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) dimension(:),intent(in) :: arr
                real(kind=4), optional,intent(in) :: seed
                real(kind=4) dimension(size(arr)) :: ans
            end function cumprod
            function poly_rr(x,coeffs) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) intent(in) :: x
                real(kind=4) dimension(:),intent(in) :: coeffs
                real(kind=4) :: poly_rr
            end function poly_rr
            function poly_dd(x,coeffs) ! in :Umpy:nrutil.f90:nrutil
                real(kind=8) intent(in) :: x
                real(kind=8) dimension(:),intent(in) :: coeffs
                real(kind=8) :: poly_dd
            end function poly_dd
            function poly_rc(x,coeffs) ! in :Umpy:nrutil.f90:nrutil
                complex(kind=kind((1.0,1.0))) intent(in) :: x
                real(kind=4) dimension(:),intent(in) :: coeffs
                complex(kind=kind((1.0,1.0))) :: poly_rc
            end function poly_rc
            function poly_cc(x,coeffs) ! in :Umpy:nrutil.f90:nrutil
                complex(kind=kind((1.0,1.0))) intent(in) :: x
                complex(kind=kind((1.0,1.0))) dimension(:),intent(in) :: coeffs
                complex(kind=kind((1.0,1.0))) :: poly_cc
            end function poly_cc
            function poly_rrv(x,coeffs) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) dimension(:),intent(in) :: x
                real(kind=4) dimension(:),intent(in) :: coeffs
                real(kind=4) dimension(size(x)) :: poly_rrv
            end function poly_rrv
            function poly_ddv(x,coeffs) ! in :Umpy:nrutil.f90:nrutil
                real(kind=8) dimension(:),intent(in) :: x
                real(kind=8) dimension(:),intent(in) :: coeffs
                real(kind=8) dimension(size(x)) :: poly_ddv
            end function poly_ddv
            function poly_msk_rrv(x,coeffs,mask) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) dimension(:),intent(in) :: x
                real(kind=4) dimension(:),intent(in) :: coeffs
                logical(kind=kind(.true.)) dimension(:),intent(in) :: mask
                real(kind=4) dimension(size(x)) :: poly_msk_rrv
            end function poly_msk_rrv
            function poly_msk_ddv(x,coeffs,mask) ! in :Umpy:nrutil.f90:nrutil
                real(kind=8) dimension(:),intent(in) :: x
                real(kind=8) dimension(:),intent(in) :: coeffs
                logical(kind=kind(.true.)) dimension(:),intent(in) :: mask
                real(kind=8) dimension(size(x)) :: poly_msk_ddv
            end function poly_msk_ddv
            function poly_term_rr(a,b) result (u) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) dimension(:),intent(in) :: a
                real(kind=4) intent(in) :: b
                real(kind=4) dimension(size(a)) :: u
            end function poly_term_rr
            function poly_term_cc(a,b) result (u) ! in :Umpy:nrutil.f90:nrutil
                complex(kind=kind((1.0,1.0))) dimension(:),intent(in) :: a
                complex(kind=kind((1.0,1.0))) intent(in) :: b
                complex(kind=kind((1.0,1.0))) dimension(size(a)) :: u
            end function poly_term_cc
            function zroots_unity(n,nn) ! in :Umpy:nrutil.f90:nrutil
                integer(kind=4) intent(in) :: n
                integer(kind=4) intent(in) :: nn
                complex(kind=kind((1.0,1.0))) dimension(nn) :: zroots_unity
            end function zroots_unity
            function outerprod_r(a,b) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) dimension(:),intent(in) :: a
                real(kind=4) dimension(:),intent(in) :: b
                real(kind=4) dimension(size(a),size(b)) :: outerprod_r
            end function outerprod_r
            function outerprod_d(a,b) ! in :Umpy:nrutil.f90:nrutil
                real(kind=8) dimension(:),intent(in) :: a
                real(kind=8) dimension(:),intent(in) :: b
                real(kind=8) dimension(size(a),size(b)) :: outerprod_d
            end function outerprod_d
            function outerdiv(a,b) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) dimension(:),intent(in) :: a
                real(kind=4) dimension(:),intent(in) :: b
                real(kind=4) dimension(size(a),size(b)) :: outerdiv
            end function outerdiv
            function outersum(a,b) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) dimension(:),intent(in) :: a
                real(kind=4) dimension(:),intent(in) :: b
                real(kind=4) dimension(size(a),size(b)) :: outersum
            end function outersum
            function outerdiff_r(a,b) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) dimension(:),intent(in) :: a
                real(kind=4) dimension(:),intent(in) :: b
                real(kind=4) dimension(size(a),size(b)) :: outerdiff_r
            end function outerdiff_r
            function outerdiff_d(a,b) ! in :Umpy:nrutil.f90:nrutil
                real(kind=8) dimension(:),intent(in) :: a
                real(kind=8) dimension(:),intent(in) :: b
                real(kind=8) dimension(size(a),size(b)) :: outerdiff_d
            end function outerdiff_d
            function outerdiff_i(a,b) ! in :Umpy:nrutil.f90:nrutil
                integer(kind=4) dimension(:),intent(in) :: a
                integer(kind=4) dimension(:),intent(in) :: b
                integer(kind=4) dimension(size(a),size(b)) :: outerdiff_i
            end function outerdiff_i
            function outerand(a,b) ! in :Umpy:nrutil.f90:nrutil
                logical(kind=kind(.true.)) dimension(:),intent(in) :: a
                logical(kind=kind(.true.)) dimension(:),intent(in) :: b
                logical(kind=kind(.true.)) dimension(size(a),size(b)) :: outerand
            end function outerand
            subroutine scatter_add_r(dest,source,dest_index) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) dimension(:),intent(out) :: dest
                real(kind=4) dimension(:),intent(in) :: source
                integer(kind=4) dimension(:),intent(in) :: dest_index
            end subroutine scatter_add_r
            subroutine scatter_add_d(dest,source,dest_index) ! in :Umpy:nrutil.f90:nrutil
                real(kind=8) dimension(:),intent(out) :: dest
                real(kind=8) dimension(:),intent(in) :: source
                integer(kind=4) dimension(:),intent(in) :: dest_index
            end subroutine scatter_add_d
            subroutine scatter_max_r(dest,source,dest_index) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) dimension(:),intent(out) :: dest
                real(kind=4) dimension(:),intent(in) :: source
                integer(kind=4) dimension(:),intent(in) :: dest_index
            end subroutine scatter_max_r
            subroutine scatter_max_d(dest,source,dest_index) ! in :Umpy:nrutil.f90:nrutil
                real(kind=8) dimension(:),intent(out) :: dest
                real(kind=8) dimension(:),intent(in) :: source
                integer(kind=4) dimension(:),intent(in) :: dest_index
            end subroutine scatter_max_d
            subroutine diagadd_rv(mat,diag) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) dimension(:,:),intent(inout) :: mat
                real(kind=4) dimension(:),intent(in) :: diag
            end subroutine diagadd_rv
            subroutine diagadd_r(mat,diag) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) dimension(:,:),intent(inout) :: mat
                real(kind=4) intent(in) :: diag
            end subroutine diagadd_r
            subroutine diagmult_rv(mat,diag) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) dimension(:,:),intent(inout) :: mat
                real(kind=4) dimension(:),intent(in) :: diag
            end subroutine diagmult_rv
            subroutine diagmult_r(mat,diag) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) dimension(:,:),intent(inout) :: mat
                real(kind=4) intent(in) :: diag
            end subroutine diagmult_r
            function get_diag_rv(mat) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) dimension(:,:),intent(in) :: mat
                real(kind=4) dimension(size(mat,1)) :: get_diag_rv
            end function get_diag_rv
            function get_diag_dv(mat) ! in :Umpy:nrutil.f90:nrutil
                real(kind=8) dimension(:,:),intent(in) :: mat
                real(kind=8) dimension(size(mat,1)) :: get_diag_dv
            end function get_diag_dv
            subroutine put_diag_rv(diagv,mat) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) dimension(:),intent(in) :: diagv
                real(kind=4) dimension(:,:),intent(inout) :: mat
            end subroutine put_diag_rv
            subroutine put_diag_r(scal,mat) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) intent(in) :: scal
                real(kind=4) dimension(:,:),intent(inout) :: mat
            end subroutine put_diag_r
            subroutine unit_matrix(mat) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) dimension(:,:),intent(out) :: mat
            end subroutine unit_matrix
            function upper_triangle(j,k,extra) ! in :Umpy:nrutil.f90:nrutil
                integer(kind=4) intent(in) :: j
                integer(kind=4) intent(in) :: k
                integer(kind=4), optional,intent(in) :: extra
                logical(kind=kind(.true.)) dimension(j,k) :: upper_triangle
            end function upper_triangle
            function lower_triangle(j,k,extra) ! in :Umpy:nrutil.f90:nrutil
                integer(kind=4) intent(in) :: j
                integer(kind=4) intent(in) :: k
                integer(kind=4), optional,intent(in) :: extra
                logical(kind=kind(.true.)) dimension(j,k) :: lower_triangle
            end function lower_triangle
            function vabs(v) ! in :Umpy:nrutil.f90:nrutil
                real(kind=4) dimension(:),intent(in) :: v
                real(kind=4) :: vabs
            end function vabs
        end module nrutil
        function bessj0_s(x) ! in :Umpy:bessj0.f90
            use nrtype
            use nrutil, only: poly
            real(kind=4) intent(in) :: x
            real(kind=4) :: bessj0_s
        end function bessj0_s
        function bessj0_v(x) ! in :Umpy:bessj0.f90
            use nrtype
            use nrutil, only: poly
            real(kind=4) dimension(:),intent(in) :: x
            real(kind=4) dimension(size(x)) :: bessj0_v
        end function bessj0_v
        function bessj1_s(x) ! in :Umpy:bessj1.f90
            use nrtype
            use nrutil, only: poly
            real(kind=4) intent(in) :: x
            real(kind=4) :: bessj1_s
        end function bessj1_s
        function bessj1_v(x) ! in :Umpy:bessj1.f90
            use nrtype
            use nrutil, only: poly
            real(kind=4) dimension(:),intent(in) :: x
            real(kind=4) dimension(size(x)) :: bessj1_v
        end function bessj1_v
        function bessj_s(n,x) ! in :Umpy:bessj.f90
            use nrtype
            use nrutil, only: assert
            use nr, only: bessj1,bessj0
            integer(kind=4) intent(in) :: n
            real(kind=4) intent(in) :: x
            real(kind=4) :: bessj_s
        end function bessj_s
        function bessj_v(n,xx) ! in :Umpy:bessj.f90
            use nrtype
            use nrutil, only: assert
            use nr, only: bessj1,bessj0
            integer(kind=4) intent(in) :: n
            real(kind=4) dimension(:),intent(in) :: xx
            real(kind=4) dimension(size(xx)) :: bessj_v
        end function bessj_v
        function bessy0_s(x) ! in :Umpy:bessy0.f90
            use nrtype
            use nrutil, only: poly,assert
            use nr, only: bessj0
            real(kind=4) intent(in) :: x
            real(kind=4) :: bessy0_s
        end function bessy0_s
        function bessy0_v(x) ! in :Umpy:bessy0.f90
            use nrtype
            use nrutil, only: poly,assert
            use nr, only: bessj0
            real(kind=4) dimension(:),intent(in) :: x
            real(kind=4) dimension(size(x)) :: bessy0_v
        end function bessy0_v
        function bessy1_s(x) ! in :Umpy:bessy1.f90
            use nrtype
            use nrutil, only: poly,assert
            use nr, only: bessj1
            real(kind=4) intent(in) :: x
            real(kind=4) :: bessy1_s
        end function bessy1_s
        function bessy1_v(x) ! in :Umpy:bessy1.f90
            use nrtype
            use nrutil, only: poly,assert
            use nr, only: bessj1
            real(kind=4) dimension(:),intent(in) :: x
            real(kind=4) dimension(size(x)) :: bessy1_v
        end function bessy1_v
        function bessy_s(n,x) ! in :Umpy:bessy.f90
            use nrtype
            use nrutil, only: assert
            use nr, only: bessy0,bessy1
            integer(kind=4) intent(in) :: n
            real(kind=4) intent(in) :: x
            real(kind=4) :: bessy_s
        end function bessy_s
        function bessy_v(n,x) ! in :Umpy:bessy.f90
            use nrtype
            use nrutil, only: assert
            use nr, only: bessy0,bessy1
            integer(kind=4) intent(in) :: n
            real(kind=4) dimension(:),intent(in) :: x
            real(kind=4) dimension(size(x)) :: bessy_v
        end function bessy_v
        module global ! in :Umpy:global.f90
            use nrtype
            real(kind=4), parameter,optional :: mu=80
            real(kind=4), parameter,optional :: bbeta=6.5
            real(kind=4), parameter,optional :: rs=6271
            real(kind=4), parameter,optional :: a=3458.0
        end module global
    end interface 
end python module Umpy

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
